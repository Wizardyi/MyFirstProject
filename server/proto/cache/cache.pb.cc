// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cache.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cache.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cacheproto {

namespace {

const ::google::protobuf::Descriptor* MessageType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageType_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OCCheckLive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OCCheckLive_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cache_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cache_2eproto() {
  protobuf_AddDesc_cache_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cache.proto");
  GOOGLE_CHECK(file != NULL);
  MessageType_descriptor_ = file->message_type(0);
  static const int MessageType_offsets_[1] = {
  };
  MessageType_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageType_descriptor_,
      MessageType::default_instance_,
      MessageType_offsets_,
      -1,
      -1,
      -1,
      sizeof(MessageType),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageType, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageType, _is_default_instance_));
  MessageType_Type_descriptor_ = MessageType_descriptor_->enum_type(0);
  OCCheckLive_descriptor_ = file->message_type(1);
  static const int OCCheckLive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCheckLive, id_),
  };
  OCCheckLive_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OCCheckLive_descriptor_,
      OCCheckLive::default_instance_,
      OCCheckLive_offsets_,
      -1,
      -1,
      -1,
      sizeof(OCCheckLive),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCheckLive, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCCheckLive, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cache_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageType_descriptor_, &MessageType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OCCheckLive_descriptor_, &OCCheckLive::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cache_2eproto() {
  delete MessageType::default_instance_;
  delete MessageType_reflection_;
  delete OCCheckLive::default_instance_;
  delete OCCheckLive_reflection_;
}

void protobuf_AddDesc_cache_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cache_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013cache.proto\022\ncacheproto\"V\n\013MessageType"
    "\"G\n\004Type\022\014\n\010StartCmd\020\000\022\017\n\nOCStartCmd\020\320\017\022"
    "\020\n\013OCCheckLive\020\321\017\022\016\n\tOCSEndCmd\020\267\027\"\031\n\013OCC"
    "heckLive\022\n\n\002id\030\001 \001(\rb\006proto3", 148);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cache.proto", &protobuf_RegisterTypes);
  MessageType::default_instance_ = new MessageType();
  OCCheckLive::default_instance_ = new OCCheckLive();
  MessageType::default_instance_->InitAsDefaultInstance();
  OCCheckLive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cache_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cache_2eproto {
  StaticDescriptorInitializer_cache_2eproto() {
    protobuf_AddDesc_cache_2eproto();
  }
} static_descriptor_initializer_cache_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* MessageType_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_Type_descriptor_;
}
bool MessageType_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 2000:
    case 2001:
    case 2999:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MessageType_Type MessageType::StartCmd;
const MessageType_Type MessageType::OCStartCmd;
const MessageType_Type MessageType::OCCheckLive;
const MessageType_Type MessageType::OCSEndCmd;
const MessageType_Type MessageType::Type_MIN;
const MessageType_Type MessageType::Type_MAX;
const int MessageType::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageType::MessageType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cacheproto.MessageType)
}

void MessageType::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MessageType::MessageType(const MessageType& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cacheproto.MessageType)
}

void MessageType::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

MessageType::~MessageType() {
  // @@protoc_insertion_point(destructor:cacheproto.MessageType)
  SharedDtor();
}

void MessageType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}

const MessageType& MessageType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cache_2eproto();
  return *default_instance_;
}

MessageType* MessageType::default_instance_ = NULL;

MessageType* MessageType::New(::google::protobuf::Arena* arena) const {
  MessageType* n = new MessageType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageType::Clear() {
// @@protoc_insertion_point(message_clear_start:cacheproto.MessageType)
}

bool MessageType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cacheproto.MessageType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:cacheproto.MessageType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cacheproto.MessageType)
  return false;
#undef DO_
}

void MessageType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cacheproto.MessageType)
  // @@protoc_insertion_point(serialize_end:cacheproto.MessageType)
}

::google::protobuf::uint8* MessageType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cacheproto.MessageType)
  // @@protoc_insertion_point(serialize_to_array_end:cacheproto.MessageType)
  return target;
}

int MessageType::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cacheproto.MessageType)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cacheproto.MessageType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageType* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cacheproto.MessageType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cacheproto.MessageType)
    MergeFrom(*source);
  }
}

void MessageType::MergeFrom(const MessageType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cacheproto.MessageType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void MessageType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cacheproto.MessageType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageType::CopyFrom(const MessageType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cacheproto.MessageType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageType::IsInitialized() const {

  return true;
}

void MessageType::Swap(MessageType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageType::InternalSwap(MessageType* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageType_descriptor_;
  metadata.reflection = MessageType_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageType

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OCCheckLive::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OCCheckLive::OCCheckLive()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cacheproto.OCCheckLive)
}

void OCCheckLive::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

OCCheckLive::OCCheckLive(const OCCheckLive& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cacheproto.OCCheckLive)
}

void OCCheckLive::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0u;
}

OCCheckLive::~OCCheckLive() {
  // @@protoc_insertion_point(destructor:cacheproto.OCCheckLive)
  SharedDtor();
}

void OCCheckLive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OCCheckLive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OCCheckLive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OCCheckLive_descriptor_;
}

const OCCheckLive& OCCheckLive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cache_2eproto();
  return *default_instance_;
}

OCCheckLive* OCCheckLive::default_instance_ = NULL;

OCCheckLive* OCCheckLive::New(::google::protobuf::Arena* arena) const {
  OCCheckLive* n = new OCCheckLive;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OCCheckLive::Clear() {
// @@protoc_insertion_point(message_clear_start:cacheproto.OCCheckLive)
  id_ = 0u;
}

bool OCCheckLive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cacheproto.OCCheckLive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cacheproto.OCCheckLive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cacheproto.OCCheckLive)
  return false;
#undef DO_
}

void OCCheckLive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cacheproto.OCCheckLive)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:cacheproto.OCCheckLive)
}

::google::protobuf::uint8* OCCheckLive::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cacheproto.OCCheckLive)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cacheproto.OCCheckLive)
  return target;
}

int OCCheckLive::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cacheproto.OCCheckLive)
  int total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OCCheckLive::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cacheproto.OCCheckLive)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OCCheckLive* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OCCheckLive>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cacheproto.OCCheckLive)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cacheproto.OCCheckLive)
    MergeFrom(*source);
  }
}

void OCCheckLive::MergeFrom(const OCCheckLive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cacheproto.OCCheckLive)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void OCCheckLive::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cacheproto.OCCheckLive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OCCheckLive::CopyFrom(const OCCheckLive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cacheproto.OCCheckLive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OCCheckLive::IsInitialized() const {

  return true;
}

void OCCheckLive::Swap(OCCheckLive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OCCheckLive::InternalSwap(OCCheckLive* other) {
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OCCheckLive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OCCheckLive_descriptor_;
  metadata.reflection = OCCheckLive_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OCCheckLive

// optional uint32 id = 1;
void OCCheckLive::clear_id() {
  id_ = 0u;
}
 ::google::protobuf::uint32 OCCheckLive::id() const {
  // @@protoc_insertion_point(field_get:cacheproto.OCCheckLive.id)
  return id_;
}
 void OCCheckLive::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:cacheproto.OCCheckLive.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace cacheproto

// @@protoc_insertion_point(global_scope)
