// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: share.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "share.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace shareproto {

namespace {

const ::google::protobuf::Descriptor* ServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerRegisterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerRegisterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerTroopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerTroopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TroopDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TroopDetailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TroopAttackInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TroopAttackInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RegisterType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_share_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_share_2eproto() {
  protobuf_AddDesc_share_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "share.proto");
  GOOGLE_CHECK(file != NULL);
  ServerInfo_descriptor_ = file->message_type(0);
  static const int ServerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, user_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, play_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, permission_),
  };
  ServerInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerInfo_descriptor_,
      ServerInfo::default_instance_,
      ServerInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ServerInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _is_default_instance_));
  PlayerRegisterInfo_descriptor_ = file->message_type(1);
  static const int PlayerRegisterInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRegisterInfo, register_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRegisterInfo, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRegisterInfo, online_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRegisterInfo, player_nick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRegisterInfo, source_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRegisterInfo, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRegisterInfo, platform_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRegisterInfo, source_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRegisterInfo, gate_id_),
  };
  PlayerRegisterInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerRegisterInfo_descriptor_,
      PlayerRegisterInfo::default_instance_,
      PlayerRegisterInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayerRegisterInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRegisterInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRegisterInfo, _is_default_instance_));
  PlayerTroopInfo_descriptor_ = file->message_type(2);
  static const int PlayerTroopInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTroopInfo, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTroopInfo, troop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTroopInfo, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTroopInfo, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTroopInfo, target_pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTroopInfo, target_pos_y_),
  };
  PlayerTroopInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerTroopInfo_descriptor_,
      PlayerTroopInfo::default_instance_,
      PlayerTroopInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayerTroopInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTroopInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTroopInfo, _is_default_instance_));
  TroopDetailInfo_descriptor_ = file->message_type(3);
  static const int TroopDetailInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TroopDetailInfo, troop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TroopDetailInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TroopDetailInfo, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TroopDetailInfo, attack_cd_),
  };
  TroopDetailInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TroopDetailInfo_descriptor_,
      TroopDetailInfo::default_instance_,
      TroopDetailInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(TroopDetailInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TroopDetailInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TroopDetailInfo, _is_default_instance_));
  TroopAttackInfo_descriptor_ = file->message_type(4);
  static const int TroopAttackInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TroopAttackInfo, attack_player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TroopAttackInfo, attack_troop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TroopAttackInfo, be_attacked_player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TroopAttackInfo, be_attacked_troop_id_),
  };
  TroopAttackInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TroopAttackInfo_descriptor_,
      TroopAttackInfo::default_instance_,
      TroopAttackInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(TroopAttackInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TroopAttackInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TroopAttackInfo, _is_default_instance_));
  RegisterType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_share_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerInfo_descriptor_, &ServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerRegisterInfo_descriptor_, &PlayerRegisterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerTroopInfo_descriptor_, &PlayerTroopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TroopDetailInfo_descriptor_, &TroopDetailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TroopAttackInfo_descriptor_, &TroopAttackInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_share_2eproto() {
  delete ServerInfo::default_instance_;
  delete ServerInfo_reflection_;
  delete PlayerRegisterInfo::default_instance_;
  delete PlayerRegisterInfo_reflection_;
  delete PlayerTroopInfo::default_instance_;
  delete PlayerTroopInfo_reflection_;
  delete TroopDetailInfo::default_instance_;
  delete TroopDetailInfo_reflection_;
  delete TroopAttackInfo::default_instance_;
  delete TroopAttackInfo_reflection_;
}

void protobuf_AddDesc_share_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_share_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013share.proto\022\nshareproto\"Y\n\nServerInfo\022"
    "\021\n\tserver_id\030\001 \001(\r\022\023\n\013user_number\030\002 \001(\r\022"
    "\017\n\007play_id\030\003 \001(\r\022\022\n\npermission\030\004 \001(\r\"\343\001\n"
    "\022PlayerRegisterInfo\022/\n\rregister_type\030\001 \001"
    "(\0162\030.shareproto.RegisterType\022\021\n\tplayer_i"
    "d\030\002 \001(\r\022\021\n\tonline_id\030\003 \001(\r\022\023\n\013player_nic"
    "k\030\004 \001(\014\022\025\n\rsource_number\030\005 \001(\014\022\021\n\tserver"
    "_id\030\006 \001(\r\022\023\n\013platform_id\030\007 \001(\r\022\021\n\tsource"
    "_id\030\010 \001(\r\022\017\n\007gate_id\030\t \001(\r\"\200\001\n\017PlayerTro"
    "opInfo\022\021\n\tplayer_id\030\001 \001(\r\022\020\n\010troop_id\030\002 "
    "\001(\r\022\r\n\005pos_x\030\003 \001(\r\022\r\n\005pos_y\030\004 \001(\r\022\024\n\014tar"
    "get_pos_x\030\005 \001(\r\022\024\n\014target_pos_y\030\006 \001(\r\"R\n"
    "\017TroopDetailInfo\022\020\n\010troop_id\030\001 \001(\004\022\n\n\002hp"
    "\030\002 \001(\002\022\016\n\006attack\030\003 \001(\002\022\021\n\tattack_cd\030\004 \001("
    "\r\"\201\001\n\017TroopAttackInfo\022\030\n\020attack_player_i"
    "d\030\001 \001(\r\022\027\n\017attack_troop_id\030\002 \001(\r\022\035\n\025be_a"
    "ttacked_player_id\030\003 \001(\r\022\034\n\024be_attacked_t"
    "roop_id\030\004 \001(\r*-\n\014RegisterType\022\r\n\tPLAYER_"
    "ON\020\000\022\016\n\nPLAYER_OFF\020\001b\006proto3", 748);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "share.proto", &protobuf_RegisterTypes);
  ServerInfo::default_instance_ = new ServerInfo();
  PlayerRegisterInfo::default_instance_ = new PlayerRegisterInfo();
  PlayerTroopInfo::default_instance_ = new PlayerTroopInfo();
  TroopDetailInfo::default_instance_ = new TroopDetailInfo();
  TroopAttackInfo::default_instance_ = new TroopAttackInfo();
  ServerInfo::default_instance_->InitAsDefaultInstance();
  PlayerRegisterInfo::default_instance_->InitAsDefaultInstance();
  PlayerTroopInfo::default_instance_->InitAsDefaultInstance();
  TroopDetailInfo::default_instance_->InitAsDefaultInstance();
  TroopAttackInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_share_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_share_2eproto {
  StaticDescriptorInitializer_share_2eproto() {
    protobuf_AddDesc_share_2eproto();
  }
} static_descriptor_initializer_share_2eproto_;
const ::google::protobuf::EnumDescriptor* RegisterType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterType_descriptor_;
}
bool RegisterType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerInfo::kServerIdFieldNumber;
const int ServerInfo::kUserNumberFieldNumber;
const int ServerInfo::kPlayIdFieldNumber;
const int ServerInfo::kPermissionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerInfo::ServerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shareproto.ServerInfo)
}

void ServerInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ServerInfo::ServerInfo(const ServerInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:shareproto.ServerInfo)
}

void ServerInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  server_id_ = 0u;
  user_number_ = 0u;
  play_id_ = 0u;
  permission_ = 0u;
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:shareproto.ServerInfo)
  SharedDtor();
}

void ServerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfo_descriptor_;
}

const ServerInfo& ServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_share_2eproto();
  return *default_instance_;
}

ServerInfo* ServerInfo::default_instance_ = NULL;

ServerInfo* ServerInfo::New(::google::protobuf::Arena* arena) const {
  ServerInfo* n = new ServerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:shareproto.ServerInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ServerInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServerInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(server_id_, permission_);

#undef ZR_HELPER_
#undef ZR_

}

bool ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shareproto.ServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_number;
        break;
      }

      // optional uint32 user_number = 2;
      case 2: {
        if (tag == 16) {
         parse_user_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_number_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_play_id;
        break;
      }

      // optional uint32 play_id = 3;
      case 3: {
        if (tag == 24) {
         parse_play_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_permission;
        break;
      }

      // optional uint32 permission = 4;
      case 4: {
        if (tag == 32) {
         parse_permission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &permission_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shareproto.ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shareproto.ServerInfo)
  return false;
#undef DO_
}

void ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shareproto.ServerInfo)
  // optional uint32 server_id = 1;
  if (this->server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  // optional uint32 user_number = 2;
  if (this->user_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_number(), output);
  }

  // optional uint32 play_id = 3;
  if (this->play_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->play_id(), output);
  }

  // optional uint32 permission = 4;
  if (this->permission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->permission(), output);
  }

  // @@protoc_insertion_point(serialize_end:shareproto.ServerInfo)
}

::google::protobuf::uint8* ServerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shareproto.ServerInfo)
  // optional uint32 server_id = 1;
  if (this->server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  // optional uint32 user_number = 2;
  if (this->user_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_number(), target);
  }

  // optional uint32 play_id = 3;
  if (this->play_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->play_id(), target);
  }

  // optional uint32 permission = 4;
  if (this->permission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->permission(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:shareproto.ServerInfo)
  return target;
}

int ServerInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:shareproto.ServerInfo)
  int total_size = 0;

  // optional uint32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_id());
  }

  // optional uint32 user_number = 2;
  if (this->user_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_number());
  }

  // optional uint32 play_id = 3;
  if (this->play_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_id());
  }

  // optional uint32 permission = 4;
  if (this->permission() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->permission());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shareproto.ServerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ServerInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shareproto.ServerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shareproto.ServerInfo)
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shareproto.ServerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
  if (from.user_number() != 0) {
    set_user_number(from.user_number());
  }
  if (from.play_id() != 0) {
    set_play_id(from.play_id());
  }
  if (from.permission() != 0) {
    set_permission(from.permission());
  }
}

void ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shareproto.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shareproto.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {

  return true;
}

void ServerInfo::Swap(ServerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerInfo::InternalSwap(ServerInfo* other) {
  std::swap(server_id_, other->server_id_);
  std::swap(user_number_, other->user_number_);
  std::swap(play_id_, other->play_id_);
  std::swap(permission_, other->permission_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfo_descriptor_;
  metadata.reflection = ServerInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerInfo

// optional uint32 server_id = 1;
void ServerInfo::clear_server_id() {
  server_id_ = 0u;
}
 ::google::protobuf::uint32 ServerInfo::server_id() const {
  // @@protoc_insertion_point(field_get:shareproto.ServerInfo.server_id)
  return server_id_;
}
 void ServerInfo::set_server_id(::google::protobuf::uint32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:shareproto.ServerInfo.server_id)
}

// optional uint32 user_number = 2;
void ServerInfo::clear_user_number() {
  user_number_ = 0u;
}
 ::google::protobuf::uint32 ServerInfo::user_number() const {
  // @@protoc_insertion_point(field_get:shareproto.ServerInfo.user_number)
  return user_number_;
}
 void ServerInfo::set_user_number(::google::protobuf::uint32 value) {
  
  user_number_ = value;
  // @@protoc_insertion_point(field_set:shareproto.ServerInfo.user_number)
}

// optional uint32 play_id = 3;
void ServerInfo::clear_play_id() {
  play_id_ = 0u;
}
 ::google::protobuf::uint32 ServerInfo::play_id() const {
  // @@protoc_insertion_point(field_get:shareproto.ServerInfo.play_id)
  return play_id_;
}
 void ServerInfo::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:shareproto.ServerInfo.play_id)
}

// optional uint32 permission = 4;
void ServerInfo::clear_permission() {
  permission_ = 0u;
}
 ::google::protobuf::uint32 ServerInfo::permission() const {
  // @@protoc_insertion_point(field_get:shareproto.ServerInfo.permission)
  return permission_;
}
 void ServerInfo::set_permission(::google::protobuf::uint32 value) {
  
  permission_ = value;
  // @@protoc_insertion_point(field_set:shareproto.ServerInfo.permission)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerRegisterInfo::kRegisterTypeFieldNumber;
const int PlayerRegisterInfo::kPlayerIdFieldNumber;
const int PlayerRegisterInfo::kOnlineIdFieldNumber;
const int PlayerRegisterInfo::kPlayerNickFieldNumber;
const int PlayerRegisterInfo::kSourceNumberFieldNumber;
const int PlayerRegisterInfo::kServerIdFieldNumber;
const int PlayerRegisterInfo::kPlatformIdFieldNumber;
const int PlayerRegisterInfo::kSourceIdFieldNumber;
const int PlayerRegisterInfo::kGateIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRegisterInfo::PlayerRegisterInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shareproto.PlayerRegisterInfo)
}

void PlayerRegisterInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlayerRegisterInfo::PlayerRegisterInfo(const PlayerRegisterInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:shareproto.PlayerRegisterInfo)
}

void PlayerRegisterInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  register_type_ = 0;
  player_id_ = 0u;
  online_id_ = 0u;
  player_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_id_ = 0u;
  platform_id_ = 0u;
  source_id_ = 0u;
  gate_id_ = 0u;
}

PlayerRegisterInfo::~PlayerRegisterInfo() {
  // @@protoc_insertion_point(destructor:shareproto.PlayerRegisterInfo)
  SharedDtor();
}

void PlayerRegisterInfo::SharedDtor() {
  player_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PlayerRegisterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRegisterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerRegisterInfo_descriptor_;
}

const PlayerRegisterInfo& PlayerRegisterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_share_2eproto();
  return *default_instance_;
}

PlayerRegisterInfo* PlayerRegisterInfo::default_instance_ = NULL;

PlayerRegisterInfo* PlayerRegisterInfo::New(::google::protobuf::Arena* arena) const {
  PlayerRegisterInfo* n = new PlayerRegisterInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerRegisterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:shareproto.PlayerRegisterInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayerRegisterInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerRegisterInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(register_type_, player_id_);
  ZR_(online_id_, server_id_);
  ZR_(platform_id_, source_id_);
  player_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gate_id_ = 0u;

#undef ZR_HELPER_
#undef ZR_

}

bool PlayerRegisterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shareproto.PlayerRegisterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .shareproto.RegisterType register_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_register_type(static_cast< ::shareproto::RegisterType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional uint32 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_online_id;
        break;
      }

      // optional uint32 online_id = 3;
      case 3: {
        if (tag == 24) {
         parse_online_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_player_nick;
        break;
      }

      // optional bytes player_nick = 4;
      case 4: {
        if (tag == 34) {
         parse_player_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_player_nick()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_source_number;
        break;
      }

      // optional bytes source_number = 5;
      case 5: {
        if (tag == 42) {
         parse_source_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_source_number()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_server_id;
        break;
      }

      // optional uint32 server_id = 6;
      case 6: {
        if (tag == 48) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_platform_id;
        break;
      }

      // optional uint32 platform_id = 7;
      case 7: {
        if (tag == 56) {
         parse_platform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_source_id;
        break;
      }

      // optional uint32 source_id = 8;
      case 8: {
        if (tag == 64) {
         parse_source_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_gate_id;
        break;
      }

      // optional uint32 gate_id = 9;
      case 9: {
        if (tag == 72) {
         parse_gate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shareproto.PlayerRegisterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shareproto.PlayerRegisterInfo)
  return false;
#undef DO_
}

void PlayerRegisterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shareproto.PlayerRegisterInfo)
  // optional .shareproto.RegisterType register_type = 1;
  if (this->register_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->register_type(), output);
  }

  // optional uint32 player_id = 2;
  if (this->player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_id(), output);
  }

  // optional uint32 online_id = 3;
  if (this->online_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->online_id(), output);
  }

  // optional bytes player_nick = 4;
  if (this->player_nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->player_nick(), output);
  }

  // optional bytes source_number = 5;
  if (this->source_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->source_number(), output);
  }

  // optional uint32 server_id = 6;
  if (this->server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->server_id(), output);
  }

  // optional uint32 platform_id = 7;
  if (this->platform_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->platform_id(), output);
  }

  // optional uint32 source_id = 8;
  if (this->source_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->source_id(), output);
  }

  // optional uint32 gate_id = 9;
  if (this->gate_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->gate_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:shareproto.PlayerRegisterInfo)
}

::google::protobuf::uint8* PlayerRegisterInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shareproto.PlayerRegisterInfo)
  // optional .shareproto.RegisterType register_type = 1;
  if (this->register_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->register_type(), target);
  }

  // optional uint32 player_id = 2;
  if (this->player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_id(), target);
  }

  // optional uint32 online_id = 3;
  if (this->online_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->online_id(), target);
  }

  // optional bytes player_nick = 4;
  if (this->player_nick().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->player_nick(), target);
  }

  // optional bytes source_number = 5;
  if (this->source_number().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->source_number(), target);
  }

  // optional uint32 server_id = 6;
  if (this->server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->server_id(), target);
  }

  // optional uint32 platform_id = 7;
  if (this->platform_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->platform_id(), target);
  }

  // optional uint32 source_id = 8;
  if (this->source_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->source_id(), target);
  }

  // optional uint32 gate_id = 9;
  if (this->gate_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->gate_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:shareproto.PlayerRegisterInfo)
  return target;
}

int PlayerRegisterInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:shareproto.PlayerRegisterInfo)
  int total_size = 0;

  // optional .shareproto.RegisterType register_type = 1;
  if (this->register_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->register_type());
  }

  // optional uint32 player_id = 2;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());
  }

  // optional uint32 online_id = 3;
  if (this->online_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->online_id());
  }

  // optional bytes player_nick = 4;
  if (this->player_nick().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->player_nick());
  }

  // optional bytes source_number = 5;
  if (this->source_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->source_number());
  }

  // optional uint32 server_id = 6;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_id());
  }

  // optional uint32 platform_id = 7;
  if (this->platform_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->platform_id());
  }

  // optional uint32 source_id = 8;
  if (this->source_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->source_id());
  }

  // optional uint32 gate_id = 9;
  if (this->gate_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gate_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRegisterInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shareproto.PlayerRegisterInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayerRegisterInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerRegisterInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shareproto.PlayerRegisterInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shareproto.PlayerRegisterInfo)
    MergeFrom(*source);
  }
}

void PlayerRegisterInfo::MergeFrom(const PlayerRegisterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shareproto.PlayerRegisterInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.register_type() != 0) {
    set_register_type(from.register_type());
  }
  if (from.player_id() != 0) {
    set_player_id(from.player_id());
  }
  if (from.online_id() != 0) {
    set_online_id(from.online_id());
  }
  if (from.player_nick().size() > 0) {

    player_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_nick_);
  }
  if (from.source_number().size() > 0) {

    source_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_number_);
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
  if (from.platform_id() != 0) {
    set_platform_id(from.platform_id());
  }
  if (from.source_id() != 0) {
    set_source_id(from.source_id());
  }
  if (from.gate_id() != 0) {
    set_gate_id(from.gate_id());
  }
}

void PlayerRegisterInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shareproto.PlayerRegisterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRegisterInfo::CopyFrom(const PlayerRegisterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shareproto.PlayerRegisterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRegisterInfo::IsInitialized() const {

  return true;
}

void PlayerRegisterInfo::Swap(PlayerRegisterInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRegisterInfo::InternalSwap(PlayerRegisterInfo* other) {
  std::swap(register_type_, other->register_type_);
  std::swap(player_id_, other->player_id_);
  std::swap(online_id_, other->online_id_);
  player_nick_.Swap(&other->player_nick_);
  source_number_.Swap(&other->source_number_);
  std::swap(server_id_, other->server_id_);
  std::swap(platform_id_, other->platform_id_);
  std::swap(source_id_, other->source_id_);
  std::swap(gate_id_, other->gate_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerRegisterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerRegisterInfo_descriptor_;
  metadata.reflection = PlayerRegisterInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerRegisterInfo

// optional .shareproto.RegisterType register_type = 1;
void PlayerRegisterInfo::clear_register_type() {
  register_type_ = 0;
}
 ::shareproto::RegisterType PlayerRegisterInfo::register_type() const {
  // @@protoc_insertion_point(field_get:shareproto.PlayerRegisterInfo.register_type)
  return static_cast< ::shareproto::RegisterType >(register_type_);
}
 void PlayerRegisterInfo::set_register_type(::shareproto::RegisterType value) {
  
  register_type_ = value;
  // @@protoc_insertion_point(field_set:shareproto.PlayerRegisterInfo.register_type)
}

// optional uint32 player_id = 2;
void PlayerRegisterInfo::clear_player_id() {
  player_id_ = 0u;
}
 ::google::protobuf::uint32 PlayerRegisterInfo::player_id() const {
  // @@protoc_insertion_point(field_get:shareproto.PlayerRegisterInfo.player_id)
  return player_id_;
}
 void PlayerRegisterInfo::set_player_id(::google::protobuf::uint32 value) {
  
  player_id_ = value;
  // @@protoc_insertion_point(field_set:shareproto.PlayerRegisterInfo.player_id)
}

// optional uint32 online_id = 3;
void PlayerRegisterInfo::clear_online_id() {
  online_id_ = 0u;
}
 ::google::protobuf::uint32 PlayerRegisterInfo::online_id() const {
  // @@protoc_insertion_point(field_get:shareproto.PlayerRegisterInfo.online_id)
  return online_id_;
}
 void PlayerRegisterInfo::set_online_id(::google::protobuf::uint32 value) {
  
  online_id_ = value;
  // @@protoc_insertion_point(field_set:shareproto.PlayerRegisterInfo.online_id)
}

// optional bytes player_nick = 4;
void PlayerRegisterInfo::clear_player_nick() {
  player_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PlayerRegisterInfo::player_nick() const {
  // @@protoc_insertion_point(field_get:shareproto.PlayerRegisterInfo.player_nick)
  return player_nick_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerRegisterInfo::set_player_nick(const ::std::string& value) {
  
  player_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:shareproto.PlayerRegisterInfo.player_nick)
}
 void PlayerRegisterInfo::set_player_nick(const char* value) {
  
  player_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shareproto.PlayerRegisterInfo.player_nick)
}
 void PlayerRegisterInfo::set_player_nick(const void* value, size_t size) {
  
  player_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shareproto.PlayerRegisterInfo.player_nick)
}
 ::std::string* PlayerRegisterInfo::mutable_player_nick() {
  
  // @@protoc_insertion_point(field_mutable:shareproto.PlayerRegisterInfo.player_nick)
  return player_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerRegisterInfo::release_player_nick() {
  // @@protoc_insertion_point(field_release:shareproto.PlayerRegisterInfo.player_nick)
  
  return player_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerRegisterInfo::set_allocated_player_nick(::std::string* player_nick) {
  if (player_nick != NULL) {
    
  } else {
    
  }
  player_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_nick);
  // @@protoc_insertion_point(field_set_allocated:shareproto.PlayerRegisterInfo.player_nick)
}

// optional bytes source_number = 5;
void PlayerRegisterInfo::clear_source_number() {
  source_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PlayerRegisterInfo::source_number() const {
  // @@protoc_insertion_point(field_get:shareproto.PlayerRegisterInfo.source_number)
  return source_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerRegisterInfo::set_source_number(const ::std::string& value) {
  
  source_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:shareproto.PlayerRegisterInfo.source_number)
}
 void PlayerRegisterInfo::set_source_number(const char* value) {
  
  source_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shareproto.PlayerRegisterInfo.source_number)
}
 void PlayerRegisterInfo::set_source_number(const void* value, size_t size) {
  
  source_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shareproto.PlayerRegisterInfo.source_number)
}
 ::std::string* PlayerRegisterInfo::mutable_source_number() {
  
  // @@protoc_insertion_point(field_mutable:shareproto.PlayerRegisterInfo.source_number)
  return source_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerRegisterInfo::release_source_number() {
  // @@protoc_insertion_point(field_release:shareproto.PlayerRegisterInfo.source_number)
  
  return source_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerRegisterInfo::set_allocated_source_number(::std::string* source_number) {
  if (source_number != NULL) {
    
  } else {
    
  }
  source_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_number);
  // @@protoc_insertion_point(field_set_allocated:shareproto.PlayerRegisterInfo.source_number)
}

// optional uint32 server_id = 6;
void PlayerRegisterInfo::clear_server_id() {
  server_id_ = 0u;
}
 ::google::protobuf::uint32 PlayerRegisterInfo::server_id() const {
  // @@protoc_insertion_point(field_get:shareproto.PlayerRegisterInfo.server_id)
  return server_id_;
}
 void PlayerRegisterInfo::set_server_id(::google::protobuf::uint32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:shareproto.PlayerRegisterInfo.server_id)
}

// optional uint32 platform_id = 7;
void PlayerRegisterInfo::clear_platform_id() {
  platform_id_ = 0u;
}
 ::google::protobuf::uint32 PlayerRegisterInfo::platform_id() const {
  // @@protoc_insertion_point(field_get:shareproto.PlayerRegisterInfo.platform_id)
  return platform_id_;
}
 void PlayerRegisterInfo::set_platform_id(::google::protobuf::uint32 value) {
  
  platform_id_ = value;
  // @@protoc_insertion_point(field_set:shareproto.PlayerRegisterInfo.platform_id)
}

// optional uint32 source_id = 8;
void PlayerRegisterInfo::clear_source_id() {
  source_id_ = 0u;
}
 ::google::protobuf::uint32 PlayerRegisterInfo::source_id() const {
  // @@protoc_insertion_point(field_get:shareproto.PlayerRegisterInfo.source_id)
  return source_id_;
}
 void PlayerRegisterInfo::set_source_id(::google::protobuf::uint32 value) {
  
  source_id_ = value;
  // @@protoc_insertion_point(field_set:shareproto.PlayerRegisterInfo.source_id)
}

// optional uint32 gate_id = 9;
void PlayerRegisterInfo::clear_gate_id() {
  gate_id_ = 0u;
}
 ::google::protobuf::uint32 PlayerRegisterInfo::gate_id() const {
  // @@protoc_insertion_point(field_get:shareproto.PlayerRegisterInfo.gate_id)
  return gate_id_;
}
 void PlayerRegisterInfo::set_gate_id(::google::protobuf::uint32 value) {
  
  gate_id_ = value;
  // @@protoc_insertion_point(field_set:shareproto.PlayerRegisterInfo.gate_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerTroopInfo::kPlayerIdFieldNumber;
const int PlayerTroopInfo::kTroopIdFieldNumber;
const int PlayerTroopInfo::kPosXFieldNumber;
const int PlayerTroopInfo::kPosYFieldNumber;
const int PlayerTroopInfo::kTargetPosXFieldNumber;
const int PlayerTroopInfo::kTargetPosYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerTroopInfo::PlayerTroopInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shareproto.PlayerTroopInfo)
}

void PlayerTroopInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlayerTroopInfo::PlayerTroopInfo(const PlayerTroopInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:shareproto.PlayerTroopInfo)
}

void PlayerTroopInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  player_id_ = 0u;
  troop_id_ = 0u;
  pos_x_ = 0u;
  pos_y_ = 0u;
  target_pos_x_ = 0u;
  target_pos_y_ = 0u;
}

PlayerTroopInfo::~PlayerTroopInfo() {
  // @@protoc_insertion_point(destructor:shareproto.PlayerTroopInfo)
  SharedDtor();
}

void PlayerTroopInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerTroopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerTroopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerTroopInfo_descriptor_;
}

const PlayerTroopInfo& PlayerTroopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_share_2eproto();
  return *default_instance_;
}

PlayerTroopInfo* PlayerTroopInfo::default_instance_ = NULL;

PlayerTroopInfo* PlayerTroopInfo::New(::google::protobuf::Arena* arena) const {
  PlayerTroopInfo* n = new PlayerTroopInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerTroopInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:shareproto.PlayerTroopInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayerTroopInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerTroopInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(player_id_, target_pos_y_);

#undef ZR_HELPER_
#undef ZR_

}

bool PlayerTroopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shareproto.PlayerTroopInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_troop_id;
        break;
      }

      // optional uint32 troop_id = 2;
      case 2: {
        if (tag == 16) {
         parse_troop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &troop_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pos_x;
        break;
      }

      // optional uint32 pos_x = 3;
      case 3: {
        if (tag == 24) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pos_y;
        break;
      }

      // optional uint32 pos_y = 4;
      case 4: {
        if (tag == 32) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_target_pos_x;
        break;
      }

      // optional uint32 target_pos_x = 5;
      case 5: {
        if (tag == 40) {
         parse_target_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_pos_x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_target_pos_y;
        break;
      }

      // optional uint32 target_pos_y = 6;
      case 6: {
        if (tag == 48) {
         parse_target_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_pos_y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shareproto.PlayerTroopInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shareproto.PlayerTroopInfo)
  return false;
#undef DO_
}

void PlayerTroopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shareproto.PlayerTroopInfo)
  // optional uint32 player_id = 1;
  if (this->player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional uint32 troop_id = 2;
  if (this->troop_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->troop_id(), output);
  }

  // optional uint32 pos_x = 3;
  if (this->pos_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos_x(), output);
  }

  // optional uint32 pos_y = 4;
  if (this->pos_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pos_y(), output);
  }

  // optional uint32 target_pos_x = 5;
  if (this->target_pos_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->target_pos_x(), output);
  }

  // optional uint32 target_pos_y = 6;
  if (this->target_pos_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->target_pos_y(), output);
  }

  // @@protoc_insertion_point(serialize_end:shareproto.PlayerTroopInfo)
}

::google::protobuf::uint8* PlayerTroopInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shareproto.PlayerTroopInfo)
  // optional uint32 player_id = 1;
  if (this->player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional uint32 troop_id = 2;
  if (this->troop_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->troop_id(), target);
  }

  // optional uint32 pos_x = 3;
  if (this->pos_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos_x(), target);
  }

  // optional uint32 pos_y = 4;
  if (this->pos_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pos_y(), target);
  }

  // optional uint32 target_pos_x = 5;
  if (this->target_pos_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->target_pos_x(), target);
  }

  // optional uint32 target_pos_y = 6;
  if (this->target_pos_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->target_pos_y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:shareproto.PlayerTroopInfo)
  return target;
}

int PlayerTroopInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:shareproto.PlayerTroopInfo)
  int total_size = 0;

  // optional uint32 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());
  }

  // optional uint32 troop_id = 2;
  if (this->troop_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->troop_id());
  }

  // optional uint32 pos_x = 3;
  if (this->pos_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos_x());
  }

  // optional uint32 pos_y = 4;
  if (this->pos_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos_y());
  }

  // optional uint32 target_pos_x = 5;
  if (this->target_pos_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_pos_x());
  }

  // optional uint32 target_pos_y = 6;
  if (this->target_pos_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_pos_y());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerTroopInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shareproto.PlayerTroopInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayerTroopInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerTroopInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shareproto.PlayerTroopInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shareproto.PlayerTroopInfo)
    MergeFrom(*source);
  }
}

void PlayerTroopInfo::MergeFrom(const PlayerTroopInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shareproto.PlayerTroopInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.player_id() != 0) {
    set_player_id(from.player_id());
  }
  if (from.troop_id() != 0) {
    set_troop_id(from.troop_id());
  }
  if (from.pos_x() != 0) {
    set_pos_x(from.pos_x());
  }
  if (from.pos_y() != 0) {
    set_pos_y(from.pos_y());
  }
  if (from.target_pos_x() != 0) {
    set_target_pos_x(from.target_pos_x());
  }
  if (from.target_pos_y() != 0) {
    set_target_pos_y(from.target_pos_y());
  }
}

void PlayerTroopInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shareproto.PlayerTroopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerTroopInfo::CopyFrom(const PlayerTroopInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shareproto.PlayerTroopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerTroopInfo::IsInitialized() const {

  return true;
}

void PlayerTroopInfo::Swap(PlayerTroopInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerTroopInfo::InternalSwap(PlayerTroopInfo* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(troop_id_, other->troop_id_);
  std::swap(pos_x_, other->pos_x_);
  std::swap(pos_y_, other->pos_y_);
  std::swap(target_pos_x_, other->target_pos_x_);
  std::swap(target_pos_y_, other->target_pos_y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerTroopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerTroopInfo_descriptor_;
  metadata.reflection = PlayerTroopInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerTroopInfo

// optional uint32 player_id = 1;
void PlayerTroopInfo::clear_player_id() {
  player_id_ = 0u;
}
 ::google::protobuf::uint32 PlayerTroopInfo::player_id() const {
  // @@protoc_insertion_point(field_get:shareproto.PlayerTroopInfo.player_id)
  return player_id_;
}
 void PlayerTroopInfo::set_player_id(::google::protobuf::uint32 value) {
  
  player_id_ = value;
  // @@protoc_insertion_point(field_set:shareproto.PlayerTroopInfo.player_id)
}

// optional uint32 troop_id = 2;
void PlayerTroopInfo::clear_troop_id() {
  troop_id_ = 0u;
}
 ::google::protobuf::uint32 PlayerTroopInfo::troop_id() const {
  // @@protoc_insertion_point(field_get:shareproto.PlayerTroopInfo.troop_id)
  return troop_id_;
}
 void PlayerTroopInfo::set_troop_id(::google::protobuf::uint32 value) {
  
  troop_id_ = value;
  // @@protoc_insertion_point(field_set:shareproto.PlayerTroopInfo.troop_id)
}

// optional uint32 pos_x = 3;
void PlayerTroopInfo::clear_pos_x() {
  pos_x_ = 0u;
}
 ::google::protobuf::uint32 PlayerTroopInfo::pos_x() const {
  // @@protoc_insertion_point(field_get:shareproto.PlayerTroopInfo.pos_x)
  return pos_x_;
}
 void PlayerTroopInfo::set_pos_x(::google::protobuf::uint32 value) {
  
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:shareproto.PlayerTroopInfo.pos_x)
}

// optional uint32 pos_y = 4;
void PlayerTroopInfo::clear_pos_y() {
  pos_y_ = 0u;
}
 ::google::protobuf::uint32 PlayerTroopInfo::pos_y() const {
  // @@protoc_insertion_point(field_get:shareproto.PlayerTroopInfo.pos_y)
  return pos_y_;
}
 void PlayerTroopInfo::set_pos_y(::google::protobuf::uint32 value) {
  
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:shareproto.PlayerTroopInfo.pos_y)
}

// optional uint32 target_pos_x = 5;
void PlayerTroopInfo::clear_target_pos_x() {
  target_pos_x_ = 0u;
}
 ::google::protobuf::uint32 PlayerTroopInfo::target_pos_x() const {
  // @@protoc_insertion_point(field_get:shareproto.PlayerTroopInfo.target_pos_x)
  return target_pos_x_;
}
 void PlayerTroopInfo::set_target_pos_x(::google::protobuf::uint32 value) {
  
  target_pos_x_ = value;
  // @@protoc_insertion_point(field_set:shareproto.PlayerTroopInfo.target_pos_x)
}

// optional uint32 target_pos_y = 6;
void PlayerTroopInfo::clear_target_pos_y() {
  target_pos_y_ = 0u;
}
 ::google::protobuf::uint32 PlayerTroopInfo::target_pos_y() const {
  // @@protoc_insertion_point(field_get:shareproto.PlayerTroopInfo.target_pos_y)
  return target_pos_y_;
}
 void PlayerTroopInfo::set_target_pos_y(::google::protobuf::uint32 value) {
  
  target_pos_y_ = value;
  // @@protoc_insertion_point(field_set:shareproto.PlayerTroopInfo.target_pos_y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TroopDetailInfo::kTroopIdFieldNumber;
const int TroopDetailInfo::kHpFieldNumber;
const int TroopDetailInfo::kAttackFieldNumber;
const int TroopDetailInfo::kAttackCdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TroopDetailInfo::TroopDetailInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shareproto.TroopDetailInfo)
}

void TroopDetailInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TroopDetailInfo::TroopDetailInfo(const TroopDetailInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:shareproto.TroopDetailInfo)
}

void TroopDetailInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  troop_id_ = GOOGLE_ULONGLONG(0);
  hp_ = 0;
  attack_ = 0;
  attack_cd_ = 0u;
}

TroopDetailInfo::~TroopDetailInfo() {
  // @@protoc_insertion_point(destructor:shareproto.TroopDetailInfo)
  SharedDtor();
}

void TroopDetailInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TroopDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TroopDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TroopDetailInfo_descriptor_;
}

const TroopDetailInfo& TroopDetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_share_2eproto();
  return *default_instance_;
}

TroopDetailInfo* TroopDetailInfo::default_instance_ = NULL;

TroopDetailInfo* TroopDetailInfo::New(::google::protobuf::Arena* arena) const {
  TroopDetailInfo* n = new TroopDetailInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TroopDetailInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:shareproto.TroopDetailInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TroopDetailInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TroopDetailInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(troop_id_, attack_cd_);

#undef ZR_HELPER_
#undef ZR_

}

bool TroopDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shareproto.TroopDetailInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 troop_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &troop_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_hp;
        break;
      }

      // optional float hp = 2;
      case 2: {
        if (tag == 21) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_attack;
        break;
      }

      // optional float attack = 3;
      case 3: {
        if (tag == 29) {
         parse_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attack_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_attack_cd;
        break;
      }

      // optional uint32 attack_cd = 4;
      case 4: {
        if (tag == 32) {
         parse_attack_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_cd_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shareproto.TroopDetailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shareproto.TroopDetailInfo)
  return false;
#undef DO_
}

void TroopDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shareproto.TroopDetailInfo)
  // optional uint64 troop_id = 1;
  if (this->troop_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->troop_id(), output);
  }

  // optional float hp = 2;
  if (this->hp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->hp(), output);
  }

  // optional float attack = 3;
  if (this->attack() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->attack(), output);
  }

  // optional uint32 attack_cd = 4;
  if (this->attack_cd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attack_cd(), output);
  }

  // @@protoc_insertion_point(serialize_end:shareproto.TroopDetailInfo)
}

::google::protobuf::uint8* TroopDetailInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shareproto.TroopDetailInfo)
  // optional uint64 troop_id = 1;
  if (this->troop_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->troop_id(), target);
  }

  // optional float hp = 2;
  if (this->hp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->hp(), target);
  }

  // optional float attack = 3;
  if (this->attack() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->attack(), target);
  }

  // optional uint32 attack_cd = 4;
  if (this->attack_cd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attack_cd(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:shareproto.TroopDetailInfo)
  return target;
}

int TroopDetailInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:shareproto.TroopDetailInfo)
  int total_size = 0;

  // optional uint64 troop_id = 1;
  if (this->troop_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->troop_id());
  }

  // optional float hp = 2;
  if (this->hp() != 0) {
    total_size += 1 + 4;
  }

  // optional float attack = 3;
  if (this->attack() != 0) {
    total_size += 1 + 4;
  }

  // optional uint32 attack_cd = 4;
  if (this->attack_cd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->attack_cd());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TroopDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shareproto.TroopDetailInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TroopDetailInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TroopDetailInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shareproto.TroopDetailInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shareproto.TroopDetailInfo)
    MergeFrom(*source);
  }
}

void TroopDetailInfo::MergeFrom(const TroopDetailInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shareproto.TroopDetailInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.troop_id() != 0) {
    set_troop_id(from.troop_id());
  }
  if (from.hp() != 0) {
    set_hp(from.hp());
  }
  if (from.attack() != 0) {
    set_attack(from.attack());
  }
  if (from.attack_cd() != 0) {
    set_attack_cd(from.attack_cd());
  }
}

void TroopDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shareproto.TroopDetailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TroopDetailInfo::CopyFrom(const TroopDetailInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shareproto.TroopDetailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TroopDetailInfo::IsInitialized() const {

  return true;
}

void TroopDetailInfo::Swap(TroopDetailInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TroopDetailInfo::InternalSwap(TroopDetailInfo* other) {
  std::swap(troop_id_, other->troop_id_);
  std::swap(hp_, other->hp_);
  std::swap(attack_, other->attack_);
  std::swap(attack_cd_, other->attack_cd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TroopDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TroopDetailInfo_descriptor_;
  metadata.reflection = TroopDetailInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TroopDetailInfo

// optional uint64 troop_id = 1;
void TroopDetailInfo::clear_troop_id() {
  troop_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 TroopDetailInfo::troop_id() const {
  // @@protoc_insertion_point(field_get:shareproto.TroopDetailInfo.troop_id)
  return troop_id_;
}
 void TroopDetailInfo::set_troop_id(::google::protobuf::uint64 value) {
  
  troop_id_ = value;
  // @@protoc_insertion_point(field_set:shareproto.TroopDetailInfo.troop_id)
}

// optional float hp = 2;
void TroopDetailInfo::clear_hp() {
  hp_ = 0;
}
 float TroopDetailInfo::hp() const {
  // @@protoc_insertion_point(field_get:shareproto.TroopDetailInfo.hp)
  return hp_;
}
 void TroopDetailInfo::set_hp(float value) {
  
  hp_ = value;
  // @@protoc_insertion_point(field_set:shareproto.TroopDetailInfo.hp)
}

// optional float attack = 3;
void TroopDetailInfo::clear_attack() {
  attack_ = 0;
}
 float TroopDetailInfo::attack() const {
  // @@protoc_insertion_point(field_get:shareproto.TroopDetailInfo.attack)
  return attack_;
}
 void TroopDetailInfo::set_attack(float value) {
  
  attack_ = value;
  // @@protoc_insertion_point(field_set:shareproto.TroopDetailInfo.attack)
}

// optional uint32 attack_cd = 4;
void TroopDetailInfo::clear_attack_cd() {
  attack_cd_ = 0u;
}
 ::google::protobuf::uint32 TroopDetailInfo::attack_cd() const {
  // @@protoc_insertion_point(field_get:shareproto.TroopDetailInfo.attack_cd)
  return attack_cd_;
}
 void TroopDetailInfo::set_attack_cd(::google::protobuf::uint32 value) {
  
  attack_cd_ = value;
  // @@protoc_insertion_point(field_set:shareproto.TroopDetailInfo.attack_cd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TroopAttackInfo::kAttackPlayerIdFieldNumber;
const int TroopAttackInfo::kAttackTroopIdFieldNumber;
const int TroopAttackInfo::kBeAttackedPlayerIdFieldNumber;
const int TroopAttackInfo::kBeAttackedTroopIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TroopAttackInfo::TroopAttackInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shareproto.TroopAttackInfo)
}

void TroopAttackInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TroopAttackInfo::TroopAttackInfo(const TroopAttackInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:shareproto.TroopAttackInfo)
}

void TroopAttackInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  attack_player_id_ = 0u;
  attack_troop_id_ = 0u;
  be_attacked_player_id_ = 0u;
  be_attacked_troop_id_ = 0u;
}

TroopAttackInfo::~TroopAttackInfo() {
  // @@protoc_insertion_point(destructor:shareproto.TroopAttackInfo)
  SharedDtor();
}

void TroopAttackInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TroopAttackInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TroopAttackInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TroopAttackInfo_descriptor_;
}

const TroopAttackInfo& TroopAttackInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_share_2eproto();
  return *default_instance_;
}

TroopAttackInfo* TroopAttackInfo::default_instance_ = NULL;

TroopAttackInfo* TroopAttackInfo::New(::google::protobuf::Arena* arena) const {
  TroopAttackInfo* n = new TroopAttackInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TroopAttackInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:shareproto.TroopAttackInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TroopAttackInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TroopAttackInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(attack_player_id_, be_attacked_troop_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool TroopAttackInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shareproto.TroopAttackInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 attack_player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_player_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_attack_troop_id;
        break;
      }

      // optional uint32 attack_troop_id = 2;
      case 2: {
        if (tag == 16) {
         parse_attack_troop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_troop_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_be_attacked_player_id;
        break;
      }

      // optional uint32 be_attacked_player_id = 3;
      case 3: {
        if (tag == 24) {
         parse_be_attacked_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &be_attacked_player_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_be_attacked_troop_id;
        break;
      }

      // optional uint32 be_attacked_troop_id = 4;
      case 4: {
        if (tag == 32) {
         parse_be_attacked_troop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &be_attacked_troop_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shareproto.TroopAttackInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shareproto.TroopAttackInfo)
  return false;
#undef DO_
}

void TroopAttackInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shareproto.TroopAttackInfo)
  // optional uint32 attack_player_id = 1;
  if (this->attack_player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attack_player_id(), output);
  }

  // optional uint32 attack_troop_id = 2;
  if (this->attack_troop_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attack_troop_id(), output);
  }

  // optional uint32 be_attacked_player_id = 3;
  if (this->be_attacked_player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->be_attacked_player_id(), output);
  }

  // optional uint32 be_attacked_troop_id = 4;
  if (this->be_attacked_troop_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->be_attacked_troop_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:shareproto.TroopAttackInfo)
}

::google::protobuf::uint8* TroopAttackInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shareproto.TroopAttackInfo)
  // optional uint32 attack_player_id = 1;
  if (this->attack_player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attack_player_id(), target);
  }

  // optional uint32 attack_troop_id = 2;
  if (this->attack_troop_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attack_troop_id(), target);
  }

  // optional uint32 be_attacked_player_id = 3;
  if (this->be_attacked_player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->be_attacked_player_id(), target);
  }

  // optional uint32 be_attacked_troop_id = 4;
  if (this->be_attacked_troop_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->be_attacked_troop_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:shareproto.TroopAttackInfo)
  return target;
}

int TroopAttackInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:shareproto.TroopAttackInfo)
  int total_size = 0;

  // optional uint32 attack_player_id = 1;
  if (this->attack_player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->attack_player_id());
  }

  // optional uint32 attack_troop_id = 2;
  if (this->attack_troop_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->attack_troop_id());
  }

  // optional uint32 be_attacked_player_id = 3;
  if (this->be_attacked_player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->be_attacked_player_id());
  }

  // optional uint32 be_attacked_troop_id = 4;
  if (this->be_attacked_troop_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->be_attacked_troop_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TroopAttackInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shareproto.TroopAttackInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TroopAttackInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TroopAttackInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shareproto.TroopAttackInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shareproto.TroopAttackInfo)
    MergeFrom(*source);
  }
}

void TroopAttackInfo::MergeFrom(const TroopAttackInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shareproto.TroopAttackInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.attack_player_id() != 0) {
    set_attack_player_id(from.attack_player_id());
  }
  if (from.attack_troop_id() != 0) {
    set_attack_troop_id(from.attack_troop_id());
  }
  if (from.be_attacked_player_id() != 0) {
    set_be_attacked_player_id(from.be_attacked_player_id());
  }
  if (from.be_attacked_troop_id() != 0) {
    set_be_attacked_troop_id(from.be_attacked_troop_id());
  }
}

void TroopAttackInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shareproto.TroopAttackInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TroopAttackInfo::CopyFrom(const TroopAttackInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shareproto.TroopAttackInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TroopAttackInfo::IsInitialized() const {

  return true;
}

void TroopAttackInfo::Swap(TroopAttackInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TroopAttackInfo::InternalSwap(TroopAttackInfo* other) {
  std::swap(attack_player_id_, other->attack_player_id_);
  std::swap(attack_troop_id_, other->attack_troop_id_);
  std::swap(be_attacked_player_id_, other->be_attacked_player_id_);
  std::swap(be_attacked_troop_id_, other->be_attacked_troop_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TroopAttackInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TroopAttackInfo_descriptor_;
  metadata.reflection = TroopAttackInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TroopAttackInfo

// optional uint32 attack_player_id = 1;
void TroopAttackInfo::clear_attack_player_id() {
  attack_player_id_ = 0u;
}
 ::google::protobuf::uint32 TroopAttackInfo::attack_player_id() const {
  // @@protoc_insertion_point(field_get:shareproto.TroopAttackInfo.attack_player_id)
  return attack_player_id_;
}
 void TroopAttackInfo::set_attack_player_id(::google::protobuf::uint32 value) {
  
  attack_player_id_ = value;
  // @@protoc_insertion_point(field_set:shareproto.TroopAttackInfo.attack_player_id)
}

// optional uint32 attack_troop_id = 2;
void TroopAttackInfo::clear_attack_troop_id() {
  attack_troop_id_ = 0u;
}
 ::google::protobuf::uint32 TroopAttackInfo::attack_troop_id() const {
  // @@protoc_insertion_point(field_get:shareproto.TroopAttackInfo.attack_troop_id)
  return attack_troop_id_;
}
 void TroopAttackInfo::set_attack_troop_id(::google::protobuf::uint32 value) {
  
  attack_troop_id_ = value;
  // @@protoc_insertion_point(field_set:shareproto.TroopAttackInfo.attack_troop_id)
}

// optional uint32 be_attacked_player_id = 3;
void TroopAttackInfo::clear_be_attacked_player_id() {
  be_attacked_player_id_ = 0u;
}
 ::google::protobuf::uint32 TroopAttackInfo::be_attacked_player_id() const {
  // @@protoc_insertion_point(field_get:shareproto.TroopAttackInfo.be_attacked_player_id)
  return be_attacked_player_id_;
}
 void TroopAttackInfo::set_be_attacked_player_id(::google::protobuf::uint32 value) {
  
  be_attacked_player_id_ = value;
  // @@protoc_insertion_point(field_set:shareproto.TroopAttackInfo.be_attacked_player_id)
}

// optional uint32 be_attacked_troop_id = 4;
void TroopAttackInfo::clear_be_attacked_troop_id() {
  be_attacked_troop_id_ = 0u;
}
 ::google::protobuf::uint32 TroopAttackInfo::be_attacked_troop_id() const {
  // @@protoc_insertion_point(field_get:shareproto.TroopAttackInfo.be_attacked_troop_id)
  return be_attacked_troop_id_;
}
 void TroopAttackInfo::set_be_attacked_troop_id(::google::protobuf::uint32 value) {
  
  be_attacked_troop_id_ = value;
  // @@protoc_insertion_point(field_set:shareproto.TroopAttackInfo.be_attacked_troop_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace shareproto

// @@protoc_insertion_point(global_scope)
