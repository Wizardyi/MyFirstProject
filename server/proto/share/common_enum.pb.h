// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common_enum.proto

#ifndef PROTOBUF_common_5fenum_2eproto__INCLUDED
#define PROTOBUF_common_5fenum_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace CommonEnum {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_common_5fenum_2eproto();
void protobuf_AssignDesc_common_5fenum_2eproto();
void protobuf_ShutdownFile_common_5fenum_2eproto();


enum TalentSeekConditionType {
  TalentSeekConditionType_Invalid = 0,
  TalentSeekConditionType_Huoyue = 1,
  TalentSeekConditionType_Login = 2,
  TalentSeekConditionType_CityShopBuy = 3,
  TalentSeekConditionType_GuildJoin = 4,
  TalentSeekConditionType_AddFriend = 5,
  TalentSeekConditionType_ArenaTimes = 6,
  TalentSeekConditionType_FeastTimes = 7,
  TalentSeekConditionType_CycleBattle = 8,
  TalentSeekConditionType_GuildDonate = 9,
  TalentSeekConditionType_Advanture = 10,
  TalentSeekConditionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TalentSeekConditionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TalentSeekConditionType_IsValid(int value);
const TalentSeekConditionType TalentSeekConditionType_MIN = TalentSeekConditionType_Invalid;
const TalentSeekConditionType TalentSeekConditionType_MAX = TalentSeekConditionType_Advanture;
const int TalentSeekConditionType_ARRAYSIZE = TalentSeekConditionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TalentSeekConditionType_descriptor();
inline const ::std::string& TalentSeekConditionType_Name(TalentSeekConditionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TalentSeekConditionType_descriptor(), value);
}
inline bool TalentSeekConditionType_Parse(
    const ::std::string& name, TalentSeekConditionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TalentSeekConditionType>(
    TalentSeekConditionType_descriptor(), name, value);
}
enum AddExpType {
  AddExpType_Invalid = 0,
  AddExpType_ReqAdventure = 1,
  AddExpType_LevelUpCamp = 2,
  AddExpType_Award = 3,
  AddExpType_Battle = 4,
  AddExpType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AddExpType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AddExpType_IsValid(int value);
const AddExpType AddExpType_MIN = AddExpType_Invalid;
const AddExpType AddExpType_MAX = AddExpType_Battle;
const int AddExpType_ARRAYSIZE = AddExpType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AddExpType_descriptor();
inline const ::std::string& AddExpType_Name(AddExpType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AddExpType_descriptor(), value);
}
inline bool AddExpType_Parse(
    const ::std::string& name, AddExpType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AddExpType>(
    AddExpType_descriptor(), name, value);
}
enum AddResType {
  AddResType_Invalid = 0,
  AddResType_JoinGuildAward = 1,
  AddResType_ForceSelect = 2,
  AddResType_NewGuide = 3,
  AddResType_CycleBattle = 4,
  AddResType_NewADV = 5,
  AddResType_Quest = 6,
  AddResType_TitleSalary = 7,
  AddResType_GuildSalary = 8,
  AddResType_Camp = 9,
  AddResType_OccupyCity = 10,
  AddResType_GoldShop = 11,
  AddResType_CoinShop = 12,
  AddResType_GuildShop = 13,
  AddResType_MEDALShop = 14,
  AddResType_ExploitShop = 15,
  AddResType_ScriptShop = 16,
  AddResType_SoulShop = 17,
  AddResType_CountryBiography = 18,
  AddResType_HeroBiography = 19,
  AddResType_ResourceSoldiers = 20,
  AddResType_ForceResource = 21,
  AddResType_WorldWar = 22,
  AddResType_WorldWarRank = 23,
  AddResType_Gift = 24,
  AddResType_HeroGift = 25,
  AddResType_HeroChallenge = 26,
  AddResType_Border = 27,
  AddResType_LegionInvasion = 28,
  AddResType_Arena = 29,
  AddResType_Arena_Rank = 30,
  AddResType_GuildContribute = 31,
  AddResType_HeroBreakDown = 32,
  AddResType_ScriptSwitch = 33,
  AddResType_Recharge = 34,
  AddResType_MonthCard = 35,
  AddResType_WeekCard = 36,
  AddResType_RechargeAward = 37,
  AddResType_RechargeActivity = 38,
  AddResType_Promotion = 39,
  AddResType_Fightfund = 40,
  AddResType_RaffSoul = 41,
  AddResType_TrainingSoldier = 42,
  AddResType_CampLevel = 43,
  AddResType_Consum = 44,
  AddResType_TotalSign = 45,
  AddResType_OnlineAward = 46,
  AddResType_DaySign = 47,
  AddResType_DayActivity = 48,
  AddResType_HeroDragon = 49,
  AddResType_HeroRoad = 50,
  AddResType_TalentSeek = 51,
  AddResType_UseItem = 52,
  AddResType_OneRaffWorldFree = 53,
  AddResType_OneRaffWorldGold = 54,
  AddResType_TenRaffWorld = 55,
  AddResType_OneRaffForceFree = 56,
  AddResType_OneRaffForceGold = 57,
  AddResType_TenRaffForce = 58,
  AddResType_GM = 59,
  AddResType_ComposeHero = 60,
  AddResType_GiftCode = 61,
  AddResType_FirstWeekAward = 62,
  AddResType_Xuncha = 63,
  AddResType_SystemMail = 64,
  AddResType_DailySingleRecharge = 65,
  AddResType_WeekRechargeAward = 66,
  AddResType_TheWorldTrend = 67,
  AddResType_GetFirstRecharge = 68,
  AddResType_ClearCycleBattle = 69,
  AddResType_RecruitHero = 70,
  AddResType_Banquet = 71,
  AddResType_Init = 72,
  AddResType_AdvancementRank = 73,
  AddResType_GuildActivity = 74,
  AddResType_GuildBattle = 75,
  AddResType_KillEnemyMail = 76,
  AddResType_WeaponForge = 77,
  AddResType_GiftBag = 78,
  AddResType_TenRaffWorldFirst = 79,
  AddResType_TenRaffForceFirst = 80,
  AddResType_OldMenBack = 81,
  AddResType_LimitBuyShop = 82,
  AddResType_LimitShop = 83,
  AddResType_OneRaffLimitFree = 84,
  AddResType_OneRaffLimitGold = 85,
  AddResType_TenRaffLimitFitst = 86,
  AddResType_TenRaffLimit = 87,
  AddResType_LuckDraw = 88,
  AddResType_HeroVsplitDown = 89,
  AddResType_LittleWarChapter = 90,
  AddResType_LittleWarClearPoint = 91,
  AddResType_LittleWarFinish = 92,
  AddResType_EXCHANGE = 93,
  AddResType_NewGuidHero = 94,
  AddResType_NewFightfund = 95,
  AddResType_Turn = 96,
  AddResType_CumulativeRecharge = 97,
  AddResType_DailyScore = 98,
  AddResType_GuildCity = 99,
  AddResType_EXCHANGE_Activity = 100,
  AddResType_FeastExtAward = 101,
  AddResType_ComposeSkillBook = 102,
  AddResType_ForgetSkill = 103,
  AddResType_AgentQuest = 104,
  AddResType_AgentGather = 105,
  AddResType_AgentBorder = 106,
  AddResType_BattleForceResource = 107,
  AddResType_HighFightfund = 108,
  AddResType_NewGiftBag = 109,
  AddResType_NewCumulativeRecharge = 110,
  AddResType_NewCumulativeRaffle = 111,
  AddResType_NewCumulativeConsum = 112,
  AddResType_NewCumulativeOnline = 113,
  AddResType_NewCumulativeTraining = 114,
  AddResType_NewFund = 115,
  AddResType_NewExchange = 116,
  AddResType_NewScoreBorder = 117,
  AddResType_NewScoreGather = 118,
  AddResType_NewScoreEquip = 119,
  AddResType_NewScoreWorldWar = 120,
  AddResType_NewBattlePass = 121,
  AddResType_NewShop = 122,
  AddResType_NewSign = 123,
  AddResType_NewPushGiftBag = 124,
  AddResType_NewOldMen = 125,
  AddResType_NewTurn = 126,
  AddResType_NewDraw = 127,
  AddResType_NewCumulativeDayRecharge = 128,
  AddResType_NewCard = 129,
  AddResType_NewRank = 130,
  AddResType_NewBaseLv = 131,
  AddResType_NewGuildLv = 132,
  AddResType_NewCRecharge4s1 = 133,
  AddResType_NewLimitGiftBag = 134,
  AddResType_NewFirstRecharge = 135,
  AddResType_NewFirstOccupyCity = 136,
  AddResType_NewCumulativeAllGoalType = 137,
  AddResType_UserGoalQuestChapter = 138,
  AddResType_UserGoalQuest = 139,
  AddResType_NewWish = 140,
  AddResType_PayBack = 141,
  AddResType_WeaponBreakDown = 142,
  AddResType_CompoundInvitation = 143,
  AddResType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AddResType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AddResType_IsValid(int value);
const AddResType AddResType_MIN = AddResType_Invalid;
const AddResType AddResType_MAX = AddResType_CompoundInvitation;
const int AddResType_ARRAYSIZE = AddResType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AddResType_descriptor();
inline const ::std::string& AddResType_Name(AddResType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AddResType_descriptor(), value);
}
inline bool AddResType_Parse(
    const ::std::string& name, AddResType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AddResType>(
    AddResType_descriptor(), name, value);
}
enum ExpendResType {
  ExpendResType_Invalid = 0,
  ExpendResType_DoQuest = 1,
  ExpendResType_RefreshQuest = 2,
  ExpendResType_ReqBattleEnd = 3,
  ExpendResType_RecruitHero = 4,
  ExpendResType_ClearCampBarrackCD = 5,
  ExpendResType_ClearDeputeQuestCD = 6,
  ExpendResType_ChangeCampCity = 7,
  ExpendResType_SignIn = 8,
  ExpendResType_ActivityReSignIn = 9,
  ExpendResType_WeaponForge = 10,
  ExpendResType_WeaponStrengThen = 11,
  ExpendResType_WeaponMerge = 12,
  ExpendResType_WeaponReset = 13,
  ExpendResType_EvolveHero = 14,
  ExpendResType_LevelUpCamp = 15,
  ExpendResType_Shop = 16,
  ExpendResType_RefreshShop = 17,
  ExpendResType_GuildContribute = 18,
  ExpendResType_GuildTechAccelerate = 19,
  ExpendResType_QuestHeroReduceCD = 20,
  ExpendResType_NewADVHeroReduceCD = 21,
  ExpendResType_ArenaBuyTimes = 22,
  ExpendResType_CreateGuild = 23,
  ExpendResType_RecruitSoldiers = 24,
  ExpendResType_LevelUpHero = 25,
  ExpendResType_RefreshHeroChallenge = 26,
  ExpendResType_HeroGift = 27,
  ExpendResType_LevelUpCampAccelerate = 28,
  ExpendResType_CampFarmAccelerate = 29,
  ExpendResType_CampMarketAccelerate = 30,
  ExpendResType_CampBarrackAccelerate = 31,
  ExpendResType_CampArmoryAccelerate = 32,
  ExpendResType_CampFarmFull = 33,
  ExpendResType_CampMarketFull = 34,
  ExpendResType_AcceptGovernmentQuest = 35,
  ExpendResType_AcceptMilitaryQuest = 36,
  ExpendResType_ResourceSoldiers = 37,
  ExpendResType_HeroChallenge = 38,
  ExpendResType_CreateBanquet = 39,
  ExpendResType_BanquetInvitation = 40,
  ExpendResType_BanquetHero = 41,
  ExpendResType_DeputeQuest = 42,
  ExpendResType_QuestDoAndSubmit = 43,
  ExpendResType_WorldWar = 44,
  ExpendResType_AttackAccelerate = 45,
  ExpendResType_HeroChallengeProp = 46,
  ExpendResType_GeneralSoulExchangeHero = 47,
  ExpendResType_GuildTechLevelUp = 48,
  ExpendResType_ExchangeHero = 49,
  ExpendResType_PlayerClickUse = 50,
  ExpendResType_OneRaffWorldGold = 51,
  ExpendResType_TenRaffWorld = 52,
  ExpendResType_OneRaffForceGold = 53,
  ExpendResType_TenRaffForce = 54,
  ExpendResType_Xuncha = 55,
  ExpendResType_LearnBuyTimes = 56,
  ExpendResType_GM = 57,
  ExpendResType_GiftBag = 58,
  ExpendResType_OneRaffLimitGold = 59,
  ExpendResType_TenRaffLimitGold = 60,
  ExpendResType_WorldWarSoldiers = 61,
  ExpendResType_WorldWarProvisions = 62,
  ExpendResType_WorldWarAttack = 63,
  ExpendResType_BuyLittleWarNum = 64,
  ExpendResType_HeroBreakDown = 65,
  ExpendResType_HeroVsplitDown = 66,
  ExpendResType_EXCHANGE = 67,
  ExpendResType_ClearNewAdvEventCD = 68,
  ExpendResType_TroopsSupplement = 69,
  ExpendResType_Turn = 70,
  ExpendResType_StandHero = 71,
  ExpendResType_BarrackSoldierUnlock = 72,
  ExpendResType_StandHeroTime = 73,
  ExpendResType_EXCHANGE_Activity = 74,
  ExpendResType_ComposeSkillBook = 75,
  ExpendResType_ForgetSkill = 76,
  ExpendResType_AgentQuest = 77,
  ExpendResType_AgentGather = 78,
  ExpendResType_AgentBorder = 79,
  ExpendResType_NewGiftBag = 80,
  ExpendResType_NewCumulativeRecharge = 81,
  ExpendResType_NewCumulativeRaffle = 82,
  ExpendResType_NewCumulativeConsum = 83,
  ExpendResType_NewCumulativeOnline = 84,
  ExpendResType_NewCumulativeTraining = 85,
  ExpendResType_NewFund = 86,
  ExpendResType_NewExchange = 87,
  ExpendResType_WoodFull = 88,
  ExpendResType_StoneFull = 89,
  ExpendResType_IronFull = 90,
  ExpendResType_CampSwap = 91,
  ExpendResType_CampBuildingUpgradePos = 92,
  ExpendResType_Swap = 93,
  ExpendResType_NewScoreBorder = 94,
  ExpendResType_NewScoreGather = 95,
  ExpendResType_NewScoreEquip = 96,
  ExpendResType_NewScoreWorldWar = 97,
  ExpendResType_NewBattlePass = 98,
  ExpendResType_NewShop = 99,
  ExpendResType_NewSign = 100,
  ExpendResType_NewPushGiftBag = 101,
  ExpendResType_NewOldMen = 102,
  ExpendResType_NewTurn = 103,
  ExpendResType_NewDraw = 104,
  ExpendResType_NewCumulativeDayRecharge = 105,
  ExpendResType_NewCard = 106,
  ExpendResType_NewRank = 107,
  ExpendResType_NewBaseLv = 108,
  ExpendResType_NewGuildLv = 109,
  ExpendResType_NewCRecharge4s1 = 110,
  ExpendResType_NewLimitGiftBag = 111,
  ExpendResType_NewFirstRecharge = 112,
  ExpendResType_ClearTeachCd = 113,
  ExpendResType_InheritHero = 114,
  ExpendResType_NewFirstOccupyCity = 115,
  ExpendResType_NewCumulativeAllGoalType = 116,
  ExpendResType_LimitActivityBuyAttr = 117,
  ExpendResType_BattleDrum = 118,
  ExpendResType_NewWish = 119,
  ExpendResType_WeaponBreakDown = 120,
  ExpendResType_CompoundInvitation = 121,
  ExpendResType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ExpendResType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ExpendResType_IsValid(int value);
const ExpendResType ExpendResType_MIN = ExpendResType_Invalid;
const ExpendResType ExpendResType_MAX = ExpendResType_CompoundInvitation;
const int ExpendResType_ARRAYSIZE = ExpendResType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExpendResType_descriptor();
inline const ::std::string& ExpendResType_Name(ExpendResType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExpendResType_descriptor(), value);
}
inline bool ExpendResType_Parse(
    const ::std::string& name, ExpendResType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExpendResType>(
    ExpendResType_descriptor(), name, value);
}
enum EventLogType {
  EventLogType_Invalid = 0,
  EventLogType_ResourceSoldier = 1,
  EventLogType_CountryQuest = 2,
  EventLogType_NewAdv = 3,
  EventLogType_CountryBio = 4,
  EventLogType_HeroBio = 5,
  EventLogType_CycleBattle = 6,
  EventLogType_Arena = 7,
  EventLogType_ForceResource = 8,
  EventLogType_Border = 9,
  EventLogType_WorldWar = 10,
  EventLogType_HeroChallenge = 11,
  EventLogType_DispatchTeam = 12,
  EventLogType_CycleClear = 13,
  EventLogType_GiftCode = 14,
  EventLogType_PromoteProperty = 15,
  EventLogType_UpCamp = 16,
  EventLogType_JoinGuid = 17,
  EventLogType_LittleWar = 18,
  EventLogType_HeroAddSkill = 19,
  EventLogType_LegionInvasion = 20,
  EventLogType_NewGuild = 21,
  EventLogType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EventLogType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EventLogType_IsValid(int value);
const EventLogType EventLogType_MIN = EventLogType_Invalid;
const EventLogType EventLogType_MAX = EventLogType_NewGuild;
const int EventLogType_ARRAYSIZE = EventLogType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EventLogType_descriptor();
inline const ::std::string& EventLogType_Name(EventLogType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EventLogType_descriptor(), value);
}
inline bool EventLogType_Parse(
    const ::std::string& name, EventLogType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventLogType>(
    EventLogType_descriptor(), name, value);
}
enum AddHeroSkillType {
  AddHeroSkillType_Invalid = 0,
  AddHeroSkillType_ItemSkillBook = 1,
  AddHeroSkillType_StudySkill = 2,
  AddHeroSkillType_EvolveHero = 3,
  AddHeroSkillType_ItemSkillExpBook = 4,
  AddHeroSkillType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AddHeroSkillType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AddHeroSkillType_IsValid(int value);
const AddHeroSkillType AddHeroSkillType_MIN = AddHeroSkillType_Invalid;
const AddHeroSkillType AddHeroSkillType_MAX = AddHeroSkillType_ItemSkillExpBook;
const int AddHeroSkillType_ARRAYSIZE = AddHeroSkillType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AddHeroSkillType_descriptor();
inline const ::std::string& AddHeroSkillType_Name(AddHeroSkillType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AddHeroSkillType_descriptor(), value);
}
inline bool AddHeroSkillType_Parse(
    const ::std::string& name, AddHeroSkillType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AddHeroSkillType>(
    AddHeroSkillType_descriptor(), name, value);
}
enum PromotePropertyType {
  PromotePropertyType_Invalid = 0,
  PromotePropertyType_Study = 1,
  PromotePropertyType_Quest = 2,
  PromotePropertyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PromotePropertyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PromotePropertyType_IsValid(int value);
const PromotePropertyType PromotePropertyType_MIN = PromotePropertyType_Invalid;
const PromotePropertyType PromotePropertyType_MAX = PromotePropertyType_Quest;
const int PromotePropertyType_ARRAYSIZE = PromotePropertyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PromotePropertyType_descriptor();
inline const ::std::string& PromotePropertyType_Name(PromotePropertyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PromotePropertyType_descriptor(), value);
}
inline bool PromotePropertyType_Parse(
    const ::std::string& name, PromotePropertyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PromotePropertyType>(
    PromotePropertyType_descriptor(), name, value);
}
enum AddHeroType {
  AddHeroType_Invalid = 0,
  AddHeroType_Gm = 1,
  AddHeroType_Buy = 2,
  AddHeroType_Recruit = 3,
  AddHeroType_Raffle = 4,
  AddHeroType_Banquet = 5,
  AddHeroType_InitSelect = 6,
  AddHeroType_GeneralSoul = 7,
  AddHeroType_Award = 8,
  AddHeroType_Puzzle = 9,
  AddHeroType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AddHeroType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AddHeroType_IsValid(int value);
const AddHeroType AddHeroType_MIN = AddHeroType_Invalid;
const AddHeroType AddHeroType_MAX = AddHeroType_Puzzle;
const int AddHeroType_ARRAYSIZE = AddHeroType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AddHeroType_descriptor();
inline const ::std::string& AddHeroType_Name(AddHeroType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AddHeroType_descriptor(), value);
}
inline bool AddHeroType_Parse(
    const ::std::string& name, AddHeroType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AddHeroType>(
    AddHeroType_descriptor(), name, value);
}
enum OperateQuestType {
  OperateQuestType_Invalid = 0,
  OperateQuestType_Accept = 1,
  OperateQuestType_Submit = 2,
  OperateQuestType_Depute = 3,
  OperateQuestType_Share = 4,
  OperateQuestType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OperateQuestType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool OperateQuestType_IsValid(int value);
const OperateQuestType OperateQuestType_MIN = OperateQuestType_Invalid;
const OperateQuestType OperateQuestType_MAX = OperateQuestType_Share;
const int OperateQuestType_ARRAYSIZE = OperateQuestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OperateQuestType_descriptor();
inline const ::std::string& OperateQuestType_Name(OperateQuestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OperateQuestType_descriptor(), value);
}
inline bool OperateQuestType_Parse(
    const ::std::string& name, OperateQuestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OperateQuestType>(
    OperateQuestType_descriptor(), name, value);
}
enum AddItemType {
  AddItemType_Invalid = 0,
  AddItemType_Init = 1,
  AddItemType_Buy = 2,
  AddItemType_AdvancementRank = 3,
  AddItemType_Gm = 4,
  AddItemType_Award = 5,
  AddItemType_HeroSkillBook = 6,
  AddItemType_HeroBreakDown = 7,
  AddItemType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AddItemType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AddItemType_IsValid(int value);
const AddItemType AddItemType_MIN = AddItemType_Invalid;
const AddItemType AddItemType_MAX = AddItemType_HeroBreakDown;
const int AddItemType_ARRAYSIZE = AddItemType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AddItemType_descriptor();
inline const ::std::string& AddItemType_Name(AddItemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AddItemType_descriptor(), value);
}
inline bool AddItemType_Parse(
    const ::std::string& name, AddItemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AddItemType>(
    AddItemType_descriptor(), name, value);
}
enum ExpendItemType {
  ExpendItemType_Invalid = 0,
  ExpendItemType_WorldWarAttack = 1,
  ExpendItemType_QuestDoAndSubmit = 2,
  ExpendItemType_AcceptQuest = 3,
  ExpendItemType_DeputeQuest = 4,
  ExpendItemType_ReqHeroUseItem = 5,
  ExpendItemType_ReqGiveHeroGift = 6,
  ExpendItemType_ReqRefreshShop = 7,
  ExpendItemType_ReqUseItem = 8,
  ExpendItemType_ReqEvolveHero = 9,
  ExpendItemType_ReqCampFullOutput = 10,
  ExpendItemType_ReqBanquetHero = 11,
  ExpendItemType_ReqCreateBanquet = 12,
  ExpendItemType_ReqWriteSkillBook = 13,
  ExpendItemType_ReqAddWorldWarPrepare = 14,
  ExpendItemType_CreateGuild = 15,
  ExpendItemType_ResourcesSoldier = 16,
  ExpendItemType_EvolveHero = 17,
  ExpendItemType_NEWADV = 18,
  ExpendItemType_Challenge = 19,
  ExpendItemType_WeaponForge = 28,
  ExpendItemType_WeaponStrengThen = 29,
  ExpendItemType_WeaponMerge = 30,
  ExpendItemType_WeaponReset = 31,
  ExpendItemType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ExpendItemType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ExpendItemType_IsValid(int value);
const ExpendItemType ExpendItemType_MIN = ExpendItemType_Invalid;
const ExpendItemType ExpendItemType_MAX = ExpendItemType_WeaponReset;
const int ExpendItemType_ARRAYSIZE = ExpendItemType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExpendItemType_descriptor();
inline const ::std::string& ExpendItemType_Name(ExpendItemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExpendItemType_descriptor(), value);
}
inline bool ExpendItemType_Parse(
    const ::std::string& name, ExpendItemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExpendItemType>(
    ExpendItemType_descriptor(), name, value);
}
enum AddAwardType {
  AddAwardType_Invalid = 0,
  AddAwardType_GiftCode = 1,
  AddAwardType_SubmitQuest = 2,
  AddAwardType_AdvEventBattle = 3,
  AddAwardType_ReqAdvantureEventDone = 4,
  AddAwardType_ReqGetMailAward = 5,
  AddAwardType_FirstWeekAward = 6,
  AddAwardType_UseBoxItem = 7,
  AddAwardType_ReqEndBattle = 8,
  AddAwardType_BioStepDone = 9,
  AddAwardType_FinishGoal = 10,
  AddAwardType_GetFirstRecharge = 11,
  AddAwardType_VSBattleEnd = 12,
  AddAwardType_ArenaScore = 13,
  AddAwardType_HuoYueAward = 14,
  AddAwardType_RechargeDaily = 15,
  AddAwardType_TalentSeek = 16,
  AddAwardType_DailySingleRecharge = 17,
  AddAwardType_TotalRecharge = 18,
  AddAwardType_SingleMaxRecharge = 19,
  AddAwardType_Activity = 20,
  AddAwardType_GuildSalary = 21,
  AddAwardType_WeekRechargeAward = 22,
  AddAwardType_Xuncha = 23,
  AddAwardType_SignIn = 24,
  AddAwardType_SignInTotalAward = 25,
  AddAwardType_ClearCycleBattle = 26,
  AddAwardType_TheWorldTrend = 27,
  AddAwardType_HeroChallenge = 28,
  AddAwardType_Puzzle = 29,
  AddAwardType_SevenDay = 30,
  AddAwardType_PlayChange = 31,
  AddAwardType_LuckDraw = 32,
  AddAwardType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AddAwardType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AddAwardType_IsValid(int value);
const AddAwardType AddAwardType_MIN = AddAwardType_Invalid;
const AddAwardType AddAwardType_MAX = AddAwardType_LuckDraw;
const int AddAwardType_ARRAYSIZE = AddAwardType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AddAwardType_descriptor();
inline const ::std::string& AddAwardType_Name(AddAwardType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AddAwardType_descriptor(), value);
}
inline bool AddAwardType_Parse(
    const ::std::string& name, AddAwardType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AddAwardType>(
    AddAwardType_descriptor(), name, value);
}
enum PushType {
  PushType_Invalid = 0,
  PushType_NewAdvTimes = 1,
  PushType_AwardMail = 2,
  PushType_FreeRaff = 3,
  PushType_CollectionResource = 4,
  PushType_ArenaRank = 5,
  PushType_WorldWar = 6,
  PushType_Guild = 7,
  PushType_PrivateChat = 8,
  PushType_Camp = 9,
  PushType_LimitActivity = 10,
  PushType_0To8 = 11,
  PushType_PushOnOff = 12,
  PushType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PushType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PushType_IsValid(int value);
const PushType PushType_MIN = PushType_Invalid;
const PushType PushType_MAX = PushType_PushOnOff;
const int PushType_ARRAYSIZE = PushType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PushType_descriptor();
inline const ::std::string& PushType_Name(PushType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PushType_descriptor(), value);
}
inline bool PushType_Parse(
    const ::std::string& name, PushType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PushType>(
    PushType_descriptor(), name, value);
}
enum USER_MAIL_TYPE {
  MAIL_TYPE_INVALID = 0,
  MAIL_TYPE_MAIL = 1,
  MAIL_TYPE_BATTLE = 2,
  USER_MAIL_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  USER_MAIL_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool USER_MAIL_TYPE_IsValid(int value);
const USER_MAIL_TYPE USER_MAIL_TYPE_MIN = MAIL_TYPE_INVALID;
const USER_MAIL_TYPE USER_MAIL_TYPE_MAX = MAIL_TYPE_BATTLE;
const int USER_MAIL_TYPE_ARRAYSIZE = USER_MAIL_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* USER_MAIL_TYPE_descriptor();
inline const ::std::string& USER_MAIL_TYPE_Name(USER_MAIL_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    USER_MAIL_TYPE_descriptor(), value);
}
inline bool USER_MAIL_TYPE_Parse(
    const ::std::string& name, USER_MAIL_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<USER_MAIL_TYPE>(
    USER_MAIL_TYPE_descriptor(), name, value);
}
enum USER_ATTR {
  INIT = 0,
  SVR_DAY_START_KEY = 10000,
  SVR_DAY_ARENA_TIMES_KEY = 10001,
  SVR_DAY_ARENA_SCORE_KEY = 10002,
  SVR_DAY_ARENA_UPDATE_CD_KEY = 10003,
  SVR_DAY_ARENA_SCORE_AWARD_S = 10004,
  SVR_DAY_ARENA_SCORE_AWARD_E = 10013,
  SVR_DAY_HUO_YUE_DAILY_TODAY = 10014,
  SVR_DAY_HUO_YUE_DAILY_START = 10015,
  SVR_DAY_HUO_YUE_DAILY_END = 10045,
  SVR_DAY_HUO_YUE_AWARD_TAKEN_START = 10046,
  SVR_DAY_HUO_YUE_AWARD_TAKEN_END = 10050,
  SVR_DAY_RECHARGE_BOX_KEY = 10051,
  SVR_DAY_MAX_SIGNLE_RECHARGE_RECORD_KEY = 10052,
  SVR_DAY_REWARD_QUEST_NUMBER = 10053,
  SVR_DAY_CHANGE_CAMP_CITY = 10054,
  SVR_DAY_TITLE_RANK_VAL = 10055,
  SVR_DAY_LEARN_TIMES = 10056,
  SVR_DAY_RAFFLE_HERO_TIMES = 10057,
  SVR_DAY_TRAINING_SOLDIER_NUM = 10058,
  SVR_DAY_SENSITIVE_WORD_BEATADD = 10059,
  SVR_DAY_SENSITIVE_WORD_QUESTADD = 10060,
  SVR_DAY_RECHARGE_BOX_MINI_KEY = 10061,
  SVR_DAY_HUO_YUE_DAILY_AWARD_TAKEN = 10062,
  SVR_DAY_ONLINE_TIME_TIME = 10064,
  SVR_DAY_CHALLENGE_LOCK_TIMES_KEY = 10069,
  SVR_DAY_CHALLENGE_TIMES_KEY = 10070,
  SVR_DAY_BUY_CHALLENGE_TIMES_KEY = 10071,
  SVR_DAY_LUCK_DRAW_CONSUM = 10072,
  SVR_DAY_MAX_SIGNLE_RECHARGE_RECORD = 10073,
  SVR_DAY_MAX_SIGNLE_RECHARGE_RECORD_AWARD = 10074,
  SVR_DAY_ACTIVITY_TURN_1_USE = 10075,
  SVR_DAY_ACTIVITY_TURN_2_USE = 10076,
  SVR_DAY_ACTIVITY_TURN_3_USE = 10077,
  SVR_DAY_DAILY_SCORE_BORDER_KILL = 10078,
  SVR_DAY_DAILY_SCORE_FORCE_RESOURCE = 10079,
  SVR_DAY_DAILY_SCORE_WEAPON = 10080,
  SVR_DAY_DAILY_SCORE_WORLD_WAR = 10081,
  SVR_DAY_HUO_YUE_DAILY_START_1 = 10090,
  SVR_DAY_HUO_YUE_DAILY_END_1 = 10099,
  SVR_DAY_BUY_ATTR_NUM_START = 10100,
  SVR_DAY_BUY_ATTR_NUM_END = 10119,
  SVR_DAY_BUY_WOOD_AMOUNT = 10120,
  SVR_DAY_BUY_STONE_AMOUNT = 10121,
  SVR_DAY_BUY_IRON_AMOUNT = 10122,
  SVR_DAY_BUY_PROVISIONS_AMOUNT = 10123,
  SVR_DAY_SELL_WOOD_AMOUNT = 10124,
  SVR_DAY_SELL_STONE_AMOUNT = 10125,
  SVR_DAY_SELL_IRON_AMOUNT = 10126,
  SVR_DAY_SELL_PROVISIONS_AMOUNT = 10127,
  SVR_DAY_REQUST_FRIEND_COUNT = 10128,
  SVR_DAY_COME_AMOUNT = 10129,
  SVR_DAY_RECHARGE_COUNT = 10130,
  SVR_DAY_SINGLE_RECHARGE_MAX = 10131,
  SVR_DAY_CLEAR_TEACHER_TIMES = 10149,
  SVR_DAY_GET_GIFT_TIMES_BEGIN_KEY = 10500,
  SVR_DAY_GET_GIFT_TIMES_END_KEY = 10999,
  SVR_DAY_LIMIT_BATTLEFIELD_KEY = 11100,
  SVR_DAY_DAY_BUY_BATTLEFIELD_KEY = 11102,
  SVR_DAY_LIMIT_TRIALOFTACTICS_KEY = 11103,
  SVR_DAY_DAY_BUY_TRIALOFTACTICS_KEY = 11104,
  SVR_DAY_LIMIT_ADVISER_KEY = 11105,
  SVR_DAY_DAY_BUY_ADVISER_KEY = 11106,
  SVR_DAY_LIMIT_JGHERO_KEY = 11107,
  SVR_DAY_DAY_BUY_JGHERO_KEY = 11108,
  SVR_DAY_END_KEY = 19999,
  CLI_DAY_START_KEY = 20000,
  CLI_DAY_SHOP_REFRESH_TIMES_STAR_KEY = 20001,
  CLI_DAY_SHOP_REFRESH_TIMES_END_KEY = 20100,
  CLI_DAY_HERO_CHALLENGE_REFRESH_KEY = 20101,
  CLI_DAY_END_KEY = 29999,
  PM_DAY_START_KEY = 30000,
  PM_DAY_END_KEY = 39999,
  SVR_WEEK_START_KEY = 40000,
  SVR_WEEK_RECHARGE_BOX_DAYS = 40001,
  SVR_WEEK_RECHARGE_BOX_TAKEN = 40002,
  SVR_WEEK_RECHARGE_BOX_MINI_DAYS = 40003,
  SVR_WEEK_RECHARGE_BOX_MINI_TAKEN = 40004,
  SVR_WEEK_END_KEY = 49999,
  CLI_WEEK_START_KEY = 50000,
  CLI_WEEK_END_KEY = 59999,
  PM_WEEK_START_KEY = 60000,
  PM_WEEK_END_KEY = 69999,
  SVR_MONTH_START_KEY = 70000,
  SVR_MONTH_END_KEY = 79999,
  CLI_MONTH_START_KEY = 80000,
  CLI_MONTH_END_KEY = 89999,
  PM_MONTH_START_KEY = 90000,
  PM_MONTH_END_KEY = 99999,
  SVR_FOREVER_START_KEY = 100000,
  SVR_FOREVER_ARENA_TOP_RANK_KEY = 100001,
  SVR_FOREVER_ARENA_TOP_RANK_TIME_KEY = 100002,
  SVR_FOREVER_ARENA_PVP_MEDAL = 100003,
  SVR_FOREVER_GUILD_CONTRIBUTE = 100004,
  SVR_FOREVER_HUO_YUE_CURRENT = 100005,
  SVR_FOREVER_RECHARGE_TOTAL = 100006,
  SVR_FOREVER_RECHARGE_TOTAL_AWARD_RECORD = 100007,
  SVR_FOREVER_SOCIATY = 100008,
  SVR_FOREVER_DISCOUNT_EXPIRE_TS = 100009,
  SVR_FOREVER_LAST_GET_DISCOUNT_AWARD_TS = 100010,
  SVR_FOREVER_DISCOUNT_DAILY_AWARD = 100011,
  SVR_FOREVER_TOTAL_LOGIN_DAYS = 100012,
  SVR_FOREVER_LAST_OFFLINE_TIME = 100013,
  SVR_FOREVER_FIRST_RECHARGE_REWARD = 100014,
  SVR_FOREVER_FIRST_WEEK_AWARD = 100015,
  SVR_FOREVER_SELHERO = 100016,
  SVR_FOREVER_RAFF_DAY = 100017,
  SVR_FOREVER_BANNED_TO_CHAT = 100018,
  SVR_FOREVER_BANNED_TO_LOGIN = 100019,
  SVR_FOREVER_RESOURCES_SOLDIER_LEVEL = 100020,
  SVR_FOREVER_SINGLE_RECHARGE_MAX = 100021,
  SVR_FOREVER_SIGNLE_RECHARGE_MAX_AWARD_RECORD = 100022,
  SVR_FOREVER_ARENA_PLAYER = 100023,
  SVR_FOREVER_SOULSTONE = 100024,
  SVR_FOREVER_USER_FIGHT_RECORD = 100025,
  SVR_FOREVER_RECHARGE_TOTAL_WITHOUT_CARD = 100026,
  SVR_FOREVER_USER_LAST_JOIN_WORLDWAR_ID = 100027,
  SVR_FOREVER_SIGN_IN_REMEDY_CNT = 100028,
  SVR_FOREVER_SIGN_IN_AWARD_RECORD = 100029,
  SVR_FOREVER_AUTO_WORK_KEY = 100030,
  SVR_FOREVER_DISCOUNT_MONTH_EXPIRE_TS = 100031,
  SVR_FOREVER_LAST_GET_DISCOUNT_MONTH_AWARD_TS = 100032,
  SVR_FOREVER_DISCOUNT_MONTH_DAILY_AWARD = 100033,
  SVR_FOREVER_SENSITIVE_WORD_CREDIT = 100034,
  SVR_FOREVER_SENSITIVE_WORD_INITFLAG = 100035,
  SVR_FOREVER_SENSITIVE_WORD_FORBID_ENDTIME = 100036,
  SVR_DAY_SENSITIVE_WORD_ONLINETIME = 100037,
  SVR_FOREVER_KILL_ENEMY_SCORE = 100038,
  SVR_FOREVER_CONSUM_NUM = 100039,
  SVR_FOREVER_GUILD_LEVEL = 100040,
  SVR_FOREVER_ARENA_RANK_KEY = 100041,
  SVR_FOREVER_SERVER_ID_KEY = 100042,
  SVR_FOREVER_REFLUST_DAY_TIME = 100043,
  SVR_FOREVER_RANK_LVL_KEY = 100044,
  SVR_FOREVER_SCRIPT_TEAM_KEY = 100050,
  SVR_FOREVER_OCCUPY_CITY_AWARD_BEGIN = 104000,
  SVR_FOREVER_OCCUPY_CITY_AWARD_END = 104099,
  SVR_FOREVER_SCRIPT_ID_KEY = 109000,
  SVR_FOREVER_SCRIPT_TWO_PLAY_KEY = 109001,
  SVR_FOREVER_SCRIPT_TWO_SOURCE_KEY = 109002,
  SVR_FOREVER_SCRIPT_THR_SOURCE_KEY = 109003,
  SVR_FOREVER_SCRIPT_DATA_CLEAN_KEY = 109004,
  SVR_FOREVER_SCRIPT_ITEM_CLEAN_KEY = 109005,
  SVR_FOREVER_SET_PHONE_NUM_KEY = 109006,
  SVR_FOREVER_SKILL_VERSION = 109007,
  SVR_FOREVER_SKILL_URGENT_CHANGE = 109008,
  SVR_FOREVER_RECHARGE_NEW_ACTIVITY = 109009,
  SVR_FOREVER_RECHARGE_NEW_ACTIVITY_RECORD = 109010,
  SVR_FOREVER_RECHARGE_RECORD = 109011,
  SVR_FOREVER_SKILL_EXP_COMPENSATE = 109012,
  SVR_FOREVER_SKILL_SORT = 109013,
  SVR_FOREVER_SKILL_EXP_COMPENSATE1 = 109014,
  SVR_FOREVER_WORK_AGENT_HERO = 109015,
  SVR_FOREVER_NEWACTIVITY_REFRESHTIME = 109016,
  SVR_FOREVER_CAMP_BUILDING_UPGRADE_POS_4 = 109017,
  SVR_FOREVER_CAMP_BUILDING_UPGRADE_POS_3 = 109018,
  SVR_FOREVER_NEW_GUIDE_TYPE = 109100,
  SVR_FOREVER_CHANGE_SERVER_KEY = 109101,
  SVR_FOREVER_SERVER_ON_CHANGE_KEY = 109102,
  SVR_FOREVER_ITEM_CLEAR_KEY = 109103,
  SVR_FOREVER_BATTLEFIELD_CURRENT_KEY = 109104,
  SVR_FOREVER_TRIALOFTACTICS_CURRENT_KEY = 109105,
  SVR_FOREVER_ADVISER_CURRENT_KEY = 109106,
  SVR_FOREVER_JGHERO_CURRENT_KEY = 109107,
  SVR_FOREVER_GUILD_WORLD_RANK = 109200,
  SVR_FOREVER_GUILD_FORCE_RANK = 109201,
  SVR_FOREVER_PLAY_FORCE = 109202,
  SVR_FOREVER_LAST_PLAY_GUILD_WORLD_RANK = 109203,
  SVR_FOREVER_LAST_PLAY_GUILD_FORCE_RANK = 109204,
  SVR_FOREVER_LAST_PLAY_FORCE = 109205,
  SVR_FOREVER_MERGE_SERVER_BEGIN_KEY = 109500,
  SVR_FOREVER_MERGE_SERVER_END_KEY = 109509,
  SVR_FOREVER_END_KEY = 109999,
  CLI_FOREVER_START_KEY = 110000,
  CLI_FOREVER_TALENTSEEK_AWARD_KEY = 110001,
  CLI_FOREVER_TALENTSEEK_AWARD_END_KEY = 110101,
  CLI_FOREVER_TALENTSEEK_KEY = 110102,
  CLI_FOREVER_TALENTSEEK_END_KEY = 110202,
  CLI_FOREVER_JOIN_GUILD_AWARD_KEY = 110300,
  CLI_FOREVER_TOTAL_EXPLOIT_KEY = 110301,
  CLI_FOREVER_LEARN_TIMES = 110302,
  CLI_FOREVER_SIGN_IN_BUY = 110303,
  CLI_FOREVER_OLDMEM_BACK_TIME = 110304,
  CLI_FOREVER_OLDMEM_BACK_AWARD = 110305,
  CLI_FOREVER_LITTLEWAR_CURPOINT = 110306,
  CLI_FOREVER_LITTLEWAR_RESTIMES = 110307,
  CLI_FOREVER_LITTLEWAR_RESSET = 110308,
  CLI_FOREVER_SEVENDAY_SCORE = 110309,
  CLI_FOREVER_SHOP_REFLUSH = 110310,
  CLI_FOREVER_SERVER_MAIL_INDEX = 110311,
  CLI_FOREVER_OLDMEM_BACK_ACTV = 110312,
  CLI_FOREVER_ACTIVITY_KEY = 115000,
  CLI_FOREVER_ACTIVITY_KEY_USER_RANK = 115001,
  CLI_FOREVER_ACTIVITY_KEY_RECHARGE = 115002,
  CLI_FOREVER_ACTIVITY_KEY_GUILD_LEVEL = 115003,
  CLI_FOREVER_ACTIVITY_KEY_FIGHT_FUND = 115004,
  CLI_FOREVER_ACTIVITY_KEY_OCCUPY_CITY = 115005,
  CLI_FOREVER_ACTIVITY_KEY_RECHARGE_1_IN_4 = 115006,
  CLI_FOREVER_ACTIVITY_KEY_RAFFLE_HERO = 115007,
  CLI_FOREVER_ACTIVITY_KEY_BASE_LEVEL = 115008,
  CLI_FOREVER_ACTIVITY_KEY_TRAINING_SOLDIER = 115009,
  CLI_FOREVER_ACTIVITY_KEY_RECHARGE_1_IN_4_EXTRA = 115010,
  CLI_FOREVER_ACTIVITY_KEY_KILL_ENEMY = 115011,
  CLI_FOREVER_ACTIVITY_KEY_CONSUM = 115012,
  CLI_FOREVER_ACTIVITY_KEY_LIMIT_SHOP = 115013,
  CLI_FOREVER_ACTIVITY_KEY_TOTAL_SIGN = 115014,
  CLI_FOREVER_ACTIVITY_KEY_ONLINE_TIME = 115015,
  CLI_FOREVER_ACTIVITY_KEY_PUZZLE = 115016,
  CLI_FOREVER_ACTIVITY_KEY_SPRING_SIGN = 115017,
  CLI_FOREVER_ACTIVITY_KEY_LUCK_DRAW = 115018,
  CLI_FOREVER_ACTIVITY_KEY_EXCHAENGE = 115019,
  CLI_FOREVER_ACTIVITY_KEY_NEWFIGHTFUND = 115020,
  CLI_FOREVER_ACTIVITY_KEY_TURN_1 = 115021,
  CLI_FOREVER_ACTIVITY_KEY_TURN_2 = 115022,
  CLI_FOREVER_ACTIVITY_KEY_TURN_3 = 115023,
  CLI_FOREVER_ACTIVITY_KEY_RECHARGE_SHOP_1 = 115024,
  CLI_FOREVER_ACTIVITY_KEY_RECHARGE_SHOP_2 = 115025,
  CLI_FOREVER_ACTIVITY_KEY_RECHARGE_SHOP_3 = 115026,
  CLI_FOREVER_ACTIVITY_KEY_CUMULATIVE_RECHARGE = 115027,
  CLI_FOREVER_ACTIVITY_KEY_BORDER_KILL = 115028,
  CLI_FOREVER_ACTIVITY_KEY_FORCE_RESOURCE = 115029,
  CLI_FOREVER_ACTIVITY_KEY_WEAPON = 115030,
  CLI_FOREVER_ACTIVITY_KEY_WORLD_WAR = 115031,
  CLI_FOREVER_ACTIVITY_KEY_EXCHAENGE_1 = 115032,
  CLI_FOREVER_ACTIVITY_KEY_EXCHAENGE_2 = 115033,
  CLI_FOREVER_ACTIVITY_KEY_EXCHAENGE_3 = 115034,
  CLI_FOREVER_ACTIVITY_KEY_EXCHAENGE_4 = 115035,
  CLI_FOREVER_ACTIVITY_KEY_SEVENDAY = 115036,
  CLI_FOREVER_ACTIVITY_KEY_EVERYDAY_SIGN = 115037,
  CLI_FOREVER_ACTIVITY_KEY_SEVENDAY_SIGN = 115038,
  CLI_FOREVER_ACTIVITY_KEY_MONTH_CARD = 115039,
  CLI_FOREVER_ACTIVITY_KEY_WEEK_CARD = 115040,
  CLI_FOREVER_ACTIVITY_KEY_FIRST_RECHARGE = 115041,
  CLI_FOREVER_ACTIVITY_KEY_TALENTSEEK = 115042,
  CLI_FOREVER_ACTIVITY_KEY_BAGCODE = 115043,
  CLI_FOREVER_ACTIVITY_KEY_NEW_PLAYER_GIFTBAG = 115044,
  CLI_FOREVER_ACTIVITY_KEY_STAGE_GIFTBAG = 115045,
  CLI_FOREVER_ACTIVITY_KEY_EXP_GIFTBAG = 115046,
  CLI_FOREVER_ACTIVITY_KEY_LEVEL_GIFTBAG = 115047,
  CLI_FOREVER_ACTIVITY_KEY_RANDOM_GIFTBAG = 115048,
  CLI_FOREVER_ACTIVITY_KEY_HEROGIFT_GIFTBAG = 115049,
  CLI_FOREVER_ACTIVITY_KEY_DAYTOTAL_RECHARGE = 115050,
  CLI_FOREVER_ACTIVITY_KEY_TOTAL_RECHARGE = 115051,
  CLI_FOREVER_ACTIVITY_KEY_OLDMEN_BACK = 115052,
  CLI_FOREVER_ACTIVITY_KEY_LIMITNUM_DAY = 115053,
  CLI_FOREVER_ACTIVITY_KEY_LIMITNUM_ACT_1 = 115054,
  CLI_FOREVER_ACTIVITY_KEY_LIMITNUM_ACT_2 = 115055,
  CLI_FOREVER_ACTIVITY_KEY_LIMITNUM_ACT_3 = 115056,
  CLI_FOREVER_ACTIVITY_KEY_RECHARGE_30 = 115057,
  CLI_FOREVER_ACTIVITY_KEY_RECHARGE_1_3_6 = 115058,
  CLI_FOREVER_ACTIVITY_KEY_HIGHFIGHTFUND = 115059,
  CLI_FOREVER_ACTIVITY_KEY_SUPER_WEAPON = 115060,
  CLI_FOREVER_ACTIVITY_KEY_HERO_GIFT_BIG = 115061,
  CLI_FOREVER_ACTIVITY_KEY_RECHARGE_GIFT = 115062,
  CLI_FOREVER_ACTIVITY_KEY_PRINCIPAL_GIFT = 115063,
  CLI_FOREVER_ACTIVITY_VERSION_KEY = 115400,
  CLI_FOREVER_ACTIVITY_DATA_KEY = 115800,
  CLI_FOREVER_ACTIVITY_DATA_KEY_TOTAL_SIGN = 115801,
  CLI_FOREVER_ACTIVITY_KEY_NEWFIGHTFUND_FLAG = 115802,
  STR_FOREVER_ACTIVITY_TURN_1_SCORE = 115803,
  STR_FOREVER_ACTIVITY_TURN_2_SCORE = 115804,
  STR_FOREVER_ACTIVITY_TURN_3_SCORE = 115805,
  STR_FOREVER_ACTIVITY_TURN_1_NUM = 115806,
  STR_FOREVER_ACTIVITY_TURN_2_NUM = 115807,
  STR_FOREVER_ACTIVITY_TURN_3_NUM = 115808,
  STR_FOREVER_ACTIVITY_SHOP_1_NUM = 115809,
  STR_FOREVER_ACTIVITY_SHOP_2_NUM = 115810,
  STR_FOREVER_ACTIVITY_SHOP_3_NUM = 115811,
  CLI_FOREVER_ACTIVITY_KEY_HIGHFIGHTFUND_FLAG = 115812,
  CLI_FOREVER_ACTIVITY_KEY_END = 115999,
  CLI_FOREVER_EQUIP_KEY_RESET_SCORE_START = 116000,
  CLI_FOREVER_EQUIP_KEY_RESET_SCORE_END = 116499,
  CLI_FOREVER_LITTLEWAR_CHAPTER_AWARD_START = 116500,
  CLI_FOREVER_LITTLEWAR_CHAPTER_AWARD_END = 116529,
  CLI_FOREVER_FEAST_NUM_START = 116530,
  CLI_FOREVER_FEAST_NUM_END = 116599,
  CLI_FOREVER_PLAY_CHANGE_START_KEY = 117000,
  CLI_FOREVER_PLAY_CHANGE_END_KEY = 117200,
  CLI_FOREVER_LAST_PLAY_GUILD_LVL_KEY = 117201,
  CLI_FOREVER_LAST_PLAY_AREA_LVL_KEY = 117202,
  CLI_FOREVER_LAST_PLAY_PLAYERDATA_START_KEY = 117300,
  CLI_FOREVER_LAST_PLAY_PLAYERDATA_END_KEY = 117500,
  CLI_FOREVER_END_KEY = 119999,
  PM_FOREVER_START_KEY = 120000,
  PM_FOREVER_SYS_MAIL_END_KEY = 120999,
  PM_FOREVER_FIRST_CITY_REWARD_START_KEY = 121000,
  PM_FOREVER_FIRST_CITY_REWARD_END_KEY = 121300,
  PM_FOREVER_TWT_NORMAL_AWARD_START_KEY = 121301,
  PM_FOREVER_TWT_NORMAL_AWARD_END_KEY = 121400,
  PM_FOREVER_TWT_EXTRA_AWARD_START_KEY = 121401,
  PM_FOREVER_TWT_EXTRA_AWARD_END_KEY = 121500,
  PM_FOREVER_TWT_ACHIEVEMENT_AWARD_START_KEY = 121501,
  PM_FOREVER_TWT_ACHIEVEMENT_AWARD_END_KEY = 122500,
  PM_FOREVER_DATA_TRANSFORM_AWARD_START_KEY = 122501,
  PM_FOREVER_DATA_TRANSFORM_AWARD_END_KEY = 122600,
  PM_FOREVER_END_KEY = 129999,
  STR_FOREVER_START_KEY = 130000,
  STR_FOREVER_PURCHASE_RECORD = 130001,
  STR_FOREVER_RECRUIT_HEROS = 130002,
  STR_FOREVER_FIRST_HAVE_HERO = 130003,
  STR_FOREVER_RAFFLE_HERO_TIMES = 130004,
  STR_FOREVER_USER_BANQUET_INFO = 130005,
  STR_FOREVER_USER_TEAM = 130006,
  STR_FOREVER_CLUSTER_ID = 130007,
  STR_FOREVER_USER_ADDDATA = 130008,
  STR_FOREVER_ATLAS_HERO = 130009,
  STR_FOREVER_CHALLENGE_PROP = 130010,
  STR_FOREVER_CHALLENGE_HERO_LEVEL = 130011,
  STR_FOREVER_GIFTBAG_BUY = 130012,
  STR_FOREVER_PUSH_SET = 130013,
  STR_FOREVER_USER_TEAM_MIN = 130100,
  STR_FOREVER_USER_TEAM_MAX = 130119,
  STR_FOREVER_USER_SIGN_IN_INFO = 130120,
  STR_FOREVER_USER_NEWADV = 130121,
  STR_FOREVER_USER_GUILDTECH_BUFF = 130122,
  STR_FOREVER_USER_PUZZLE = 130123,
  STR_FOREVER_USER_SEVENDAY = 130124,
  STR_FOREVER_USER_LUCK_DRAW = 130125,
  STR_FOREVER_LITTLE_WAR_TEAM = 130126,
  STR_FOREVER_USER_CHAPTER = 130127,
  STR_FOREVER_ACTIVITY_EXCHANGE_TIMES = 130128,
  STR_FOREVER_CUMULATIVE_RECHARGE = 130129,
  STR_FOREVER_DAILY_SCORE_AWARD_ID = 130131,
  STR_FOREVER_CAN_WORK_AGENT_HERO = 130132,
  STR_FOREVER_FORBIT_CHAT_STRING = 130133,
  STR_FOREVER_FORBIT_LOGIN_STRING = 130134,
  STR_FOREVER_WORKAGENT_FIELD = 130135,
  STR_FOREVER_BATTLE_DRUM = 130136,
  STR_FOREVER_SPECIAL_EVENTS = 131000,
  STR_FOREVER_FORCE_CITY_RANK = 131001,
  STR_FOREVER_LAST_FORCE_CITY_RANK = 131002,
  STR_FOREVER_END_KEY = 139999,
  PM_FOREVER_NEW_SYS_MAIL_START_KEY = 200000,
  PM_FOREVER_NEW_SYS_MAIL_END_KEY = 300000,
  USER_ATTR_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  USER_ATTR_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool USER_ATTR_IsValid(int value);
const USER_ATTR USER_ATTR_MIN = INIT;
const USER_ATTR USER_ATTR_MAX = PM_FOREVER_NEW_SYS_MAIL_END_KEY;
const int USER_ATTR_ARRAYSIZE = USER_ATTR_MAX + 1;

const ::google::protobuf::EnumDescriptor* USER_ATTR_descriptor();
inline const ::std::string& USER_ATTR_Name(USER_ATTR value) {
  return ::google::protobuf::internal::NameOfEnum(
    USER_ATTR_descriptor(), value);
}
inline bool USER_ATTR_Parse(
    const ::std::string& name, USER_ATTR* value) {
  return ::google::protobuf::internal::ParseNamedEnum<USER_ATTR>(
    USER_ATTR_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace CommonEnum

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CommonEnum::TalentSeekConditionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonEnum::TalentSeekConditionType>() {
  return ::CommonEnum::TalentSeekConditionType_descriptor();
}
template <> struct is_proto_enum< ::CommonEnum::AddExpType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonEnum::AddExpType>() {
  return ::CommonEnum::AddExpType_descriptor();
}
template <> struct is_proto_enum< ::CommonEnum::AddResType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonEnum::AddResType>() {
  return ::CommonEnum::AddResType_descriptor();
}
template <> struct is_proto_enum< ::CommonEnum::ExpendResType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonEnum::ExpendResType>() {
  return ::CommonEnum::ExpendResType_descriptor();
}
template <> struct is_proto_enum< ::CommonEnum::EventLogType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonEnum::EventLogType>() {
  return ::CommonEnum::EventLogType_descriptor();
}
template <> struct is_proto_enum< ::CommonEnum::AddHeroSkillType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonEnum::AddHeroSkillType>() {
  return ::CommonEnum::AddHeroSkillType_descriptor();
}
template <> struct is_proto_enum< ::CommonEnum::PromotePropertyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonEnum::PromotePropertyType>() {
  return ::CommonEnum::PromotePropertyType_descriptor();
}
template <> struct is_proto_enum< ::CommonEnum::AddHeroType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonEnum::AddHeroType>() {
  return ::CommonEnum::AddHeroType_descriptor();
}
template <> struct is_proto_enum< ::CommonEnum::OperateQuestType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonEnum::OperateQuestType>() {
  return ::CommonEnum::OperateQuestType_descriptor();
}
template <> struct is_proto_enum< ::CommonEnum::AddItemType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonEnum::AddItemType>() {
  return ::CommonEnum::AddItemType_descriptor();
}
template <> struct is_proto_enum< ::CommonEnum::ExpendItemType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonEnum::ExpendItemType>() {
  return ::CommonEnum::ExpendItemType_descriptor();
}
template <> struct is_proto_enum< ::CommonEnum::AddAwardType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonEnum::AddAwardType>() {
  return ::CommonEnum::AddAwardType_descriptor();
}
template <> struct is_proto_enum< ::CommonEnum::PushType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonEnum::PushType>() {
  return ::CommonEnum::PushType_descriptor();
}
template <> struct is_proto_enum< ::CommonEnum::USER_MAIL_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonEnum::USER_MAIL_TYPE>() {
  return ::CommonEnum::USER_MAIL_TYPE_descriptor();
}
template <> struct is_proto_enum< ::CommonEnum::USER_ATTR> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonEnum::USER_ATTR>() {
  return ::CommonEnum::USER_ATTR_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_5fenum_2eproto__INCLUDED
