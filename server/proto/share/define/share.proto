syntax="proto3";
package shareproto;

// 编码规范
// 该服务处理的协议定义在对应服务的 proto 文件中，该协议在多个服务中使用就应该定义在 share.proto 中
// 该文件分成2部分：
// 第一部分为 MessageType 定义协议号(协议编号范围：share 例外没有协议号，只有公共协议体定义)；
// 第二部分为协议体定义。
// 定义规则：协议号和协议体定义相同的字符串，第一个字母为协议来方（例如：Client）的简写大写，
//     第二个字母为协议去方（例如：Oline）的简写大写，接下来为协议含义（例如：EnterGame）
//     协议号和协议体定义完成以后，均需要加上清晰明了的注释。协议参数统一使用小写字母和下划线定义。
// 注：字符串类型统一使用 bytes 定义，而不是 string
// 1000-1999 db 及 dbproxy 处理的协议
// 2000-2999 cache 处理的协议
// 3000-3999 position 处理的协议
// 4000-4999 switch 处理的协议
// 5000-5999 world 处理的协议
// 6000-6999 login 处理的协议
// 7000-7999 online 处理的协议
// 8000-8999 gate 处理的协议
// 9000-9999 battle 处理的协议
// 10000-10999 pathfind 处理的协议

message ServerInfo {
    uint32 server_id								= 1; // 区号
    uint32 user_number								= 2; // 每个区的在线玩家数
	uint32 play_id									= 3; // 赛季 ID
	uint32 permission								= 4; //0:能注册 1:禁止注册
}

enum RegisterType
{
	PLAYER_ON	= 0;
	PLAYER_OFF	= 1;
}

message PlayerRegisterInfo
{
	RegisterType register_type						= 1; // 0：进入服务器；1：离开服务器
	uint32 player_id								= 2;
	uint32 online_id								= 3;
	bytes player_nick								= 4;
	bytes source_number								= 5;
	uint32 server_id								= 6;
	uint32 platform_id								= 7;
	uint32 source_id								= 8;
	uint32 gate_id									= 9;
}

message PlayerTroopInfo
{
	uint32 player_id	= 1;	// 玩家 ID
	uint32 troop_id		= 2;	// 玩家 部队ID
	uint32 pos_x		= 3;	// 玩家当前位置 x 坐标
	uint32 pos_y		= 4;	// 玩家当前位置 y 坐标
	uint32 target_pos_x	= 5;	// 玩家目标位置 x 坐标
	uint32 target_pos_y = 6;	// 玩家目标位置 y 坐标
}

message TroopDetailInfo
{
	uint64 troop_id		= 1;	// 部队唯一 ID
	float hp			= 2;	// 部队血量
	float attack		= 3;	// 部队攻击力
	uint32 attack_cd	= 4;	// 部队攻击CD
}

message TroopAttackInfo
{
	uint32 attack_player_id			= 1;
	uint32 attack_troop_id			= 2;
	uint32 be_attacked_player_id	= 3;
	uint32 be_attacked_troop_id		= 4;
}

